%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: 4 Power examples.pdf
%%Creator: Adobe Acrobat 9.5.0
%%For: rvalliant
%%CreationDate: 3/21/2012, 6:24:41 PM
%%BoundingBox: 0 0 612 792
%%HiResBoundingBox: 0 0 612 792
%%CropBox: 0 0 612 792
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1041 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-15:08:04        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   dc:format="application/pdf"
   xmp:CreateDate="2012-03-21T18:20:47-04:00"
   xmp:CreatorTool="PScript5.dll Version 5.2.2"
   xmp:ModifyDate="2012-03-21T18:20:47-04:00"
   pdf:Producer="Acrobat Distiller 9.5.0 (Windows)"
   xmpMM:DocumentID="uuid:2385f86b-73a8-4526-bcd2-ecb31898db83"
   xmpMM:InstanceID="uuid:a3c24bf3-90c6-4dff-a61a-0f86131e9f16">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>rvalliant</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">4 Power examples.xlsx</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -792 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 792 li
612 792 li
612 0 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
63 593.16 mo
70.68 593.16 li
70.68 581.16 li
63 581.16 li
cp
clp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: Verdana-Bold Initial
ct_T42Dict begin
-0.547 -0.301 1.707 1.07
 256 array 0 1 255 {1 index exch /.notdef put} for  /Verdana-Bold
Type42DictBegin
[<00010000000c000c000c000c4f532f3273dd7dd7000000cc000000606376
74205621662d0000012c000001f26670676d7a45ee2400000320000005bf
676c796600977cd200002fb000018b5e68656164de746b8e000008e00000
00366868656111500db30000091800000024686d7478d19960a50000093c
00000edc6c6f63613537987900001818000007706d617870063102840000
1f88000000206e616d65f2df4ff200001fa800000cfb70726570de7bddd1
00002ca400000309676469720000000000000000000000000002048b02bc
00050008059a053300000125059a0533000003a000d303050800020b0804
030504040204a10006ff4000205b00000010000000004d53202000200020
fffd061efe5900ca080b01ae2000019f00000000046305d1000000200001
0614000a000005d1001f000005d1001f0000000000000000000000000000
0463002300000000ffe100000000ffdd00000000ffe10000fe64fff50000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000800000008000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000001d10229000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000018f0186018001540177016d0175016901400163
0159014001830175016f00ae0000000000a500e901200119010e01010123
0111010700fb0125011d01130104000a011101ec000000f400000000009d
0000000000f4013a00f302e100000000008b000000bf00d400e400ed00fe
010e00be00be0067006700aa00a100580058011e01270139014800ee010e
011c0000009a00b100b900be00c800d400db00e600f00108015a0176018a
0194020d0247025a010e011801430189024d02fb04240007017702120167
03ba01f401060115012400ba00cc00da03b0ffe801a000e0032d02b30078
004c00d30134014003a5032a031f02d102a50000403a5438373635343332
31302f2e2d2c2b2a292827262524232221201f1e1d1c1b1a191817161514
131211100f0e0d0c0b0a090807060504030201002c01b0184358b119072b
1b212121592d2c01b0184358b11a072b1b212121592d2c01b0184358b003
2510f221b000121b212121592d2c01b0184358b11b072b1b212121592d2c
01b0184358b11c072b1b212121592d2c01b0184358b11d072b1b21212159
2d2c01b0184358b11e072b1b212121592d2c4eb00014b046234344b00325
10b10046e6b00013b00114b00010f221b001134db000122d2c01b0184358
45646a234569b01943646060b0462344231020b046f02fb000121b212121
21592d2c01b10b0a432343650a2d2c00b10a0b4323430b2d2c00b0462370
b101463e01b0462370b10246453ab10200080d2d2cb0122bb0022545b002
25456ab0408b60b0022523442121212d2cb0132bb0022545b00225456ab8
ffc08c60b0022523442121212d2cb000b0122b2121212d2cb000b0132b21
21212d2c01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8cb8
100062602b0c642364615c58b00361592d2cb100032545685458b0032545
b0032545606820b004252344b0042523441bb00325204568208a2344b003
25456860b003252344592d2cb00325204568208a2344b00325456860b003
2523442d2cb00943588721c01bb01243588745b0112bb0472344b0477ae4
1b038a45186920b04723448a8a8720b0a05158b0112bb0472344b0477ae4
1b21b0477ae4595959182d2c208a4523456860442d2c456a422d2c01182f
2d2c21212d2c01b0022545b002254564606ab00325456a6120b00425456a
208a8b65b0042523448cb00325234421212d2c01456823456961b0032545
6a6120b00425456a208a8b65b0042523448cb00325234421212d2c018a8a
45642345646164422d2c01b0022543b04054b0022543b000545a58b00325
2045b040614459b0022543b00054b0022543b040545a58b004252045b040
604459212121212d2c014b525843b00225452361441b2121592d2c014b52
5843b00225452360441b2121592d2c4b525845441b2121592d2c0120b003
252349b04060b0206320b000525823b002253823b002256538008a63381b
212121212159012d2c4b505845441b2121592d2c01b005251023208af500
b0016023edec2d2c01b005251023208af500b0016123edec2d2c01b00625
10f500edec2d2c462346608a8a462320468a608a61b8ff8062232010238a
b14b4b8a70456020b0005058b00161b8ffba8b1bb0468c59b0106068013a
2d2c2045b003254652583f1b2111592d2c2045b003254650583f1b211159
2d2c00b00743b006430b2d2c4b5258b00425b0042549b00425b004254961
20b0005458212043b0005558591bb04054582043b0005458591b2043b000
54581bb00325b8ffc03859595959212121212d2c4b52584365381b212159
2d2c4b525843381b2121592d2c21210c6423648bb84000622d2c21b08051
580c6423648bb82000621bb200402f2b59b002602d2c21b0c051580c6423
648bb81555621bb200802f2b59b002602d2c0c6423648bb8400062602321
2d2cb4000100000015b00826b00826b00826b008260f10161345683ab001
162d2cb4000100000015b00826b00826b00826b008260f1016134568653a
b001162d2cb0134358031b02592d2cb0134358021b03592d2cb00a2b2310
203cb0172b2d2cb0282b8a102320d023b0102bb00558c01b3c59201011b0
0012012d2c4b53234b515a5820458a60441b2121592d2c4b53234b515a58
381b2121592d2c20b003254523452361688a204568208a234460442d2cb1
020042b123018851b1400188535a58b910000020885458b2020102436042
59b12401885158b920000040885458b202020243604259b12401885458b2
022002436042004b014b5258b2020802436042591bb940000080885458b2
02040243604259b94000008063b80100885458b202080243604259b94000
010063b80200885458b2021002436042595959592d0000010000000507ae
4bc5da955f0f3cf5001b080000000000ad6c53f800000000c891c4c4fb9a
fd930da8089300010009000200000000000000010000080bfe5200000e38
fb9afd710da80001000000000000000000000000000003b7080001000000
000002bc000002bc0000033800cb04b300a706f0009505b000860a2d008f
06e6007902a800a7045900c1045900a605b000cc06f000da02e4002303d7
006e02e400b70584007b05b0007005b0010a05b000b905b0008c05b00054
05b000a405b0008605b0009c05b0006305b00068033800e10338004d06f0
00cc06f000f906f000ec04ef009307b6009106360018061800be05ca0067
06a400be057700be053400be067d006706b300be045e007b0471002a062b
00be051900be079500be06c600be06cd006705dd00be06cd0067064200be
05af006d05740029067f00a9061c001809070042061c001805e500090589
005a045900f8058400bd045900c606f000c505b0fff005b0017605580056
059800aa04b500580598005a055000580361002b0598005a05b300aa02bc
00a00339ffc6055e00aa02bc00aa087700aa05b300aa057e0058059800aa
0598005a03fa00aa04bf005f03a5002b05b300a10533001e07d6002d055a
001a0535001e04c6005405b000980459019b05b000c906f0009d06360018
0636001805ca0067057700be06c600be06cd0067067f00a9055800560558
00560558005605580056055800560558005604b500580550005805500058
055000580550005802bc006802bcfffa02bcfff502bcffee05b300aa057e
0058057e0058057e0058057e0058057e005805b300a105b300a105b300a1
05b300a105b000f204b300b405b000bc05b0009a05b0009705b000dd05b0
008705b400aa07b6007a07b6007a07b6008e05b001e505b0013706f000fa
08c0000406cd0065087800b106f000da06f000da06f000da05b0003405c5
00aa05b0007c0596006406f4002905ac002b044e001e04c8009804c8007f
06c0003508250056057e005804ef0070033800cb06f000d806f0008605b0
004406f0009e0672002206cc00d906cc0126086400b70636001806360018
06cd006709150067088b005805b000990800009904b3000b04b3007b02a8
002002a8007b06f000da06f0006b0535001e05e500090384ffb305b00000
045900d90459012605d2002b05d8002b05b000f202e400b702a8003504b3
00350e38008f06360018057700be06360018057700be057700be045e007b
045e0071045e007b045e007b06cd006706cd006706cd0067067f00a9067f
00a9067f00a902bc00aa05b0011a05b0011d05b0014705b0015605b0021f
05b0019a05b001b205b0014e05b001c005b0011b0523001802d0001805af
006d04bf005f0589005a04c600540459019b06a4001c056f005705e50009
0535001e05e100be059800aa06f000ec06f0010804c8011704c800e604c8
00e0097400b3097400c7097400b105b00065067d00670598005a045e007b
05af006d04bf005f05ca006704b5005805ca006704b500580598005a05b0
fff002e400b70636001805580056063600180558005606a400be070a005a
06a4001c057700be05500058057700be05500058051900be02bc00790519
00be042e00aa051900be047400aa06c600be05b300aa06c600be05b300aa
06cd0067057e0058064200be03fa00aa064200be03fa006a05af006d04bf
005f0574002903a5002b0574002903b9002b067f00a905b300a1067f00a9
05b300a10589005a04c600540589005a04c60054051900be06cd0067079e
005d0598005a057e005804ae005b05ce00580448000a0751005805b0fff0
05a000cb04c8009e0abf00bd080f007b05d200a0069affe502d2007504ee
00750a2d00910350000f04d5009202d6008302d6008304d500b102d60070
063600180558005605ca006704b5005805ca006704b50058057700be0550
0058057700be05500058057700be05500058067d00670598005a067d0067
0598005a067d00670598005a06b300be05b300aa06b3003905b30029045e
007602bcfff6045e007b02bc002d045e007b02bc001c045e007b02bc00a0
0471002a0339ffc6062b00be055e00aa055e00aa051900be02bc003406c6
00be05b300aa06c600be05b300aa06cd0067057e005806cd0067057e0058
064200be03fa006705af006d04bf005f0574002903a5002b067f00a905b3
00a1067f00a905b300a1067f00a905b300a1067f00a905b300a109070042
07d6002d05e500090535001e02c200aa063600180558005608c000040825
005606cd0065057e0058033800e10907004207d6002d0907004207d6002d
0907004207d6002d05e500090535001e02a8002005b0fff005b0009a05fc
0081097400b3097400b1097400a7097400b402a800a005b001b205b00219
05b000c70661ffeb06c8ffeb0802ffeb05a4ffeb07bfffeb0784ffeb07c3
ffeb02bcff9d06360018061800be06720022057700be0589005a06b300be
045e007b062b00be06360018079500be06c600be05b8008906cd006706b3
00be05dd00be057800680574002905e50009061c001807cf008b06c00035
045e007b05e500090598005a04ae005b05b300aa02bc00a105a6009f05bb
00aa0535001e0465005b05b300aa059a007702bc00aa055e00aa05350016
05c500aa0533001e04a50056057e0058059800aa047f005805a6009f0515
00050788009e0727005b02bcffee05a6009f057e005805a6009f0727005b
057700be07490029051900be05ef006705af006d045e007b045e007b0471
002a09c7001209b700be077d0029062b00be05e5000a06b300be06360018
061000be061800be051900be06bb002a057700be08ec001205a7004e06c4
00be06c400be062b00be06c30012079500be06b300be06cd006706b300be
05dd00be05ca00670574002905e5000a079e005d061c001806cc00be064c
0083094f00be096b00be07420029088000be061000be05ef005c099000be
065c00110558005605930073056b00aa044000aa058800250550005807fe
002d04b4004105c300aa05c300aa055e00aa05ad001906a400aa05c200aa
057e005805c200aa059800aa04c900580448000a0535001e07ba005a055a
001a05d500aa05790074080500aa081a00aa05f2000a077f00aa053200aa
04d9005707f400aa057400220550005805b30029044000aa04d8005804bf
005f02bc00a002bcffee0339ffc608190019082800aa05b30029055e00aa
0535001e05c200aa051900be044000aa080000cc0a5a00be05c200aa04c8
00a604c800d904c800d904c800b204c8010d000000000000000000000000
000000000000000000000000074f0067057e005806c500a905ef00a10000
fcec0000fcb50000fbfe0000fc6d05b0011a05b0ffb005b0011a05b0011a
05b0015605b0015605b0015605b0011d05b0022e05b0015b05b0015d05b0
015d05b0015d05b0015d05b0012906360018055800560636001805580056
06360018055800560636fff30558ff6a0636001805580056063600180558
005606360018055800560636001805580056063600180558005606360018
0558005606360018055800560636001805580056057700be055000580577
00be05500058057700be05500058057700be055000580577ffb00550ff9b
057700be05500058057700be05500058057700be05500058045e007b02bc
00aa045e007b02bc00a006710067055000540519001c0440002908ec0012
07fe002d062b00be055e00aa062b00be055e00aa06b300be05c200aa05e5
00090535001e05e500090535001e061c0018055a001a064c008305790074
064c00be05b300aa067100670550005406cd0067057e005805b300aa05b3
000005b0009904b3004004eeff9c05b0006905ca006705ca0067087700aa
06c600280ab800be090700240751009a062b00260574002909000014055e
000a05dd001406f000f9061800be04c800ab000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000006cd0067057e005806cd0067057e005806cd0067
057e005806cd003f057eff9706cd0067057e005806cd0067057e005806cd
0067057e0058074f0067057e0058074f0067057e0058074f0067057e0058
074f0067057e0058074f0067057e0058067f00a905b300a1067f00a905b3
00a106c500a905ef00a106c500a905ef00a106c500a905ef00a106c500a9
05ef00a106c500a905ef00a105e500090535001e05e500090535001e05e5
00090535001e05e500090535001e0598005a0000fba505b000a90ab9005f
05abffe905ab027e05ab027e05abffe905ab027e05abffe904000025067d
00670636001805af000e05ca006705af006d04bf005f0574002903a5002b
02bc009802e9008d06c400be05c300aa0000fd710000fd810ad1006709d2
0058085e0067072f005f0516009606f80067057e0058081e000f064e000f
081e000f064e000f06cd00670598005a0907004207d6002d05fb00ab0000
fb9a06a7006705ec001e09c60042087a002d040f00c8040f00c80282009e
0282009e0282009e05160110033800e1044200c002a800a702a800a706b3
02a905c20241015e0000076c007905b000360000001f001f001f001f0049
007a011b01e7027b0380039d03e5042c049c04cd04f50511052c055705b6
05ef06660710076807e4087708b209770a070a2b0a650aa90ad80b1f0b9c
0c5b0cce0d4d0de10e340e710ea90f330f6d0fa10fe4109310b5112e11a4
1207126012ec135f1410143a147914d115a0162a168816cf16f5171f1743
177d179317bb183a188a190b195f19cb1a121a8c1acf1afc1b431bc31bdf
1c4e1c901ce11d371d8b1dc91e551ea61eeb1f381fb2204720a520f72158
217221d7224a2269232c23e723ff2417243624552466247c249024a224b3
25762623263426452656266c267e269026c72708271f27342745275e2774
2785279a27ab27c427da2815285528e329512a2d2a592a952b122be52ca0
2d112d352d642dcc2e402f0f2f972fd63029307e30ed313431ba32213256
329132d8335333a4343d352235d2364b3674369a36f4376b380038543898
38de391939313949396139e53a9c3ab53ace3b113b543b783b9d3bd63c1b
3c313c4d3c783d743d9b3dc13e203e7f3ed93ef33f1a3f5b401f40314049
40614081409940b140c940e540fd41184130414841604178419241ae41dc
4224423d426a428342ba42ee43244359438843db442c44444455446d447e
44a5451545d345eb45fc465b46b246d44730475d47b748304857488048a4
48e949034914492b4a084abe4ad74aeb4b024b164b7f4b954baf4bc64bdf
4cc64d6a4d814df94e014e694f004f174f2d4f444f734fb44fe7501e504d
50665077508e509f50bb50d150e850fe51155127513e514f51a5521f5236
52ab52ca52e1530353155333534c5365537653995411548a54e155655615
568a56b657305754577057c558d85944595e59c659ec5a2f5ae65b6e5b96
5bb05bd75c025c5b5c775c905ca75cbd5cd65ceb5d0a5d225d395d4f5d66
5d7a5d955da65dc05dd15e875f155f2b5f4e5fa86000606c60c06104612e
618961c462226276628e62e262f36308638863d4641d642e644364de6537
6555656e6584659565a6660c66246635667766dc66f26703671e6737674d
675e67cb6836684c685e6874688568b569676a436a596a6b6a836a946aad
6ac36ad56aeb6afd6b176b2d6b436b546b826b986c286c986cc56cf76d24
6d526d796d816d9f6de26e026e206e426e686e8c6eb26ed56f256f2d6f35
6f956f9d6fa56fad6fb56fbd701870207028706d7075709c70a47122712a
7132713a71a3722b7247726372747288729972ac72c07348739c740c7451
74d574dd756975ca7614761c76bc76c47716778577c5784f78b67944794c
796779787989799b79bb7a247a3f7ae27aea7af27b0e7b167bbc7c2c7c83
7c9c7d427d7b7d837de37deb7e0e7e607e687f4f8003806c810881ad8210
821882208228824f8257825f826782e4835d8365839c83e18417845b84bc
8526857f861e86a48719872187ae882088458896889e89618a0f8a548aca
8b5b8baf8c088c3f8c478c6e8c768cf78d258d2d8dc58dcd8e058e4f8e87
8ecb8f288f8b8fdf906d90e29148915e91ec91fd92899291929992a192a9
933893a693ae93c2944a948094a794ce94ed958c95b395fb9654968b9728
974a974a974a974a974a974a974a97d8985498ac99129956996e99779980
99ba99f69a619ad19b189b5e9bcb9c2f9c819cf49d469d969e139e8b9f03
9f159f279f399f4b9f679f799f909fa69fc09fd59fe79ffca017a033a045
a057a069a07ba08da09fa0b1a0c3a0e3a0fda10fa121a139a151a167a178
a190a1a2a1baa1cca1e3a1fba20da21fa23fa259a26ea280a292a2a4a300
a34ba37da3aea463a512a57ea5e8a67ca6fea740a77fa787a78fa7f2a84c
a8a8a923a97ea9d8aa0faa17aa1faa27aa89aae0ab2dab6fab88abb0abe6
ac41acfdad78adecae92aea4af70afbfb029b098b17cb1fab27cb2abb337
b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1
b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1
b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1
b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1
b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1
b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1
b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1
b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1
b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1
b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3b1b3c3
b3d5b3e7b3f9b419b437b451b463b47fb49db4b0b4c2b4e4b4feb517b52c
b542b553b565b577b58db5a9b5bbb5cdb5dfb5f1b605b619b62fb640b656
b667b67bb68db69fb6b0b6c2b6d4b6eab6fdb70fb724b736b748b75eb76f
b7e8b7f1b888b942b958b96cb986b9a0b9bab9d4ba11ba9ebb34bbf5bc67
bc79bc8bbc9dbcb0bcc6bcebbcfdbd0ebd32bd56bdcebe40bf09bfc4bff8
c097c121c195c1fdc209c215c21dc225c22dc235c2a6c2afc309c349c3a0
c3f8c417c436c457c477c480c49ac4a2c4c4c4dbc4e3c4f9c50fc50fc56f
c5af0001000003b700760007006800050002001000400055000002050163
0003000100000046034e0001000000000000003200000001000000000001
000700320001000000000002000400390001000000000003002f003d0001
000000000004000c00470001000000000005000c00540001000000000006
000c006c0001000000000007003b00780001000000000009000e00b30001
00000000000d014c00c1000100000000000e002a020d0003000104030002
000e02370003000104030004001e02450003000104050002000a02630003
000104050004001a026d0003000104060002000602870003000104060004
0016028d0003000104070002000802a30003000104070004001802ab0003
000104080002000c02c30003000104080004002202cf0003000104090000
006402f10003000104090001000e02450003000104090002000803550003
000104090003005e035d0003000104090004001803710003000104090005
0018038b0003000104090006001803bb0003000104090007007603d30003
000104090009001c0449000300010409000d02980465000300010409000e
005406fd00030001040a0002000e075100030001040a0004001e075f0003
0001040b00020012077d00030001040b00040022078f00030001040c0002
000807b100030001040c0004001807b900030001040e0002001007d10003
0001040e0004002007e10003000104100002001208010003000104100004
0022081300030001041300020006083500030001041300040016083b0003
000104140002000e08510003000104140004001e085f0003000104150002
0014087d0003000104150004002408910003000104160002000e08b50003
000104160004001e08c30003000104190002001408e10003000104190004
002408f500030001041b0002000a091900030001041b0004001a09230003
0001041d0002000602a300030001041d0004001602ab00030001041f0002
000a093d00030001041f0004001a09470003000104240002000c09610003
000104240004001c096d00030001042d0002000a098900030001042d0004
001a099300030001080a0002000e075100030001080a0004001e075f0003
000108160002000e08b50003000108160004001e08c3000300010c0a0002
000e0751000300010c0a0004001e075f000300010c0c0002000807b10003
00010c0c0004001807b9a92032303130204d6963726f736f667420436f72
706f726174696f6e2e20416c6c205269676874732052657365727665642e
56657264616e61426f6c644d6963726f736f66743a56657264616e612042
6f6c643a56657273696f6e20352e303320284d6963726f736f6674295665
7264616e612d426f6c6456657264616e6120697320612074726164656d61
726b206f6620746865204d6963726f736f66742067726f7570206f662063
6f6d70616e6965732e4d61747468657720436172746572596f75206d6179
20757365207468697320666f6e74206173207065726d6974746564206279
207468652045554c4120666f72207468652070726f6475637420696e2077
68696368207468697320666f6e7420697320696e636c7564656420746f20
646973706c617920616e64207072696e7420636f6e74656e742e20596f75
206d6179206f6e6c792028692920656d626564207468697320666f6e7420
696e20636f6e74656e74206173207065726d697474656420627920746865
20656d62656464696e67207265737472696374696f6e7320696e636c7564
656420696e207468697320666f6e743b20616e6420286969292074656d70
6f726172696c7920646f776e6c6f6164207468697320666f6e7420746f20
61207072696e746572206f72206f74686572206f75747075742064657669
636520746f2068656c70207072696e7420636f6e74656e742e687474703a
2f2f7777772e6d6963726f736f66742e636f6d2f7479706f677261706879
2f666f6e74732f004e006500670072006500740061005600650072006400
61006e00610020004e00650067007200650074006100740075010d006e00
e900560065007200640061006e0061002000740075010d006e00e9006600
65006400560065007200640061006e006100200066006500640046006500
74007400560065007200640061006e006100200046006500740074038803
bd03c403bf03bd03b100560065007200640061006e006100310030003600
20038803bd03c403bf03bd03b100a9002000320030003100300020004d00
6900630072006f0073006f0066007400200043006f00720070006f007200
6100740069006f006e002e00200041006c006c0020005200690067006800
740073002000520065007300650072007600650064002e0042006f006c00
64004d006900630072006f0073006f00660074003a005600650072006400
61006e006100200042006f006c0064003a00560065007200730069006f00
6e00200035002e0030003300200028004d006900630072006f0073006f00
660074002900560065007200640061006e0061002d0042006f006c006400
560065007200640061006e00610020006900730020006100200074007200
6100640065006d00610072006b0020006f00660020007400680065002000
4d006900630072006f0073006f00660074002000670072006f0075007000
20006f006600200063006f006d00700061006e006900650073002e004d00
610074007400680065007700200043006100720074006500720059006f00
750020006d00610079002000750073006500200074006800690073002000
66006f006e00740020006100730020007000650072006d00690074007400
6500640020006200790020007400680065002000450055004c0041002000
66006f00720020007400680065002000700072006f006400750063007400
200069006e00200077006800690063006800200074006800690073002000
66006f006e007400200069007300200069006e0063006c00750064006500
6400200074006f00200064006900730070006c0061007900200061006e00
640020007000720069006e007400200063006f006e00740065006e007400
2e00200059006f00750020006d006100790020006f006e006c0079002000
280069002900200065006d00620065006400200074006800690073002000
66006f006e007400200069006e00200063006f006e00740065006e007400
20006100730020007000650072006d006900740074006500640020006200
79002000740068006500200065006d00620065006400640069006e006700
20007200650073007400720069006300740069006f006e00730020006900
6e0063006c007500640065006400200069006e0020007400680069007300
200066006f006e0074003b00200061006e00640020002800690069002900
2000740065006d0070006f0072006100720069006c007900200064006f00
77006e006c006f006100640020007400680069007300200066006f006e00
7400200074006f002000610020007000720069006e007400650072002000
6f00720020006f00740068006500720020006f0075007400700075007400
2000640065007600690063006500200074006f002000680065006c007000
20007000720069006e007400200063006f006e00740065006e0074002e00
68007400740070003a002f002f007700770077002e006d00690063007200
6f0073006f00660074002e0063006f006d002f007400790070006f006700
720061007000680079002f0066006f006e00740073002f004e0065006700
7200690074006100560065007200640061006e00610020004e0065006700
72006900740061004c0069006800610076006f0069007400750056006500
7200640061006e00610020004c0069006800610076006f00690074007500
4700720061007300560065007200640061006e0061002000470072006100
73004600e9006c006b00f6007600e9007200560065007200640061006e00
610020004600e9006c006b00f6007600e900720047007200610073007300
6500740074006f00560065007200640061006e0061002000470072006100
730073006500740074006f00560065007400560065007200640061006e00
61002000560065007400480061006c007600660065007400560065007200
640061006e0061002000480061006c00760066006500740050006f006700
72007500620069006f006e007900560065007200640061006e0061002000
50006f00670072007500620069006f006e0079004e006500670072006900
74006f00560065007200640061006e00610020004e006500670072006900
74006f041f043e043b0443043604380440043d044b043900560065007200
640061006e00610020041f043e043b0443043604380440043d044b043900
540075010d006e00e900560065007200640061006e006100200054007501
0d006e00e9004b0061006c0131006e00560065007200640061006e006100
20004b0061006c0131006e004b007200650070006b006f00560065007200
640061006e00610020004b007200650070006b006f004c006f0064006900
6100560065007200640061006e00610020004c006f006400690061004009
54e8e7241fe7e6111fb8ffc04064d60c103640d901d792111fcd92111fcc
92111fcb92111fca92111fc992111fc192111fa99b241f9c9b241f9a9b20
1f999b281f9b921b1ff198151fa798191f97982a1f9698251f9598191f40
98019892111f0ff2019492191f93922b1f9192211f009201b8ffc0405c92
0b10360fbc1fbc2fbc032fbb0100b910b9020fb80100b50120f87ff80210
f720f740f7037ff50110f420f40220ee50ee022fec3fec4fec0330d570d5
02b3b2281fb2b3111f2fb33fb360b070b070d405e5e4241fe3e4241f2fe4
01b8ffc0b3c20c1036b8ffc040ffb40c1036d27f2e1fd17f2e1fd07f201f
cf7f111fc07f111fbf7f111f8fbeffbe020fbd01ffbd01b1af111f70af01
10a820a8028b89301f8a892f1f897f331f8884181f8784181f8684491f85
84111f83843a1f847f201f6faaa0aab0aaf0aa0440a101105c205c405c03
f37f111f827f181f817f4a1f807f181f7e7f2e1f7d7f2e1f507f607f707f
03100f211f16152a1f0706211f19182a1f0403211f13122a1f2c2d0f2a2b
0e28290f26270e24250f22230e20210f1e1f0e1b1c1d0d18191a0d151617
0d1213140d0f10110c0c0d0e0c090a0b0c0607080c0304050c0001020c10
0f800f02400680060240038003020f003f004f007f00040f002f003f0040
1d6f007f00bf00cf00ff00081b3b081f0f3a081f0339081f0038081f5033
01b0124b004b5442b013014b004b5342b0332b4bb8080052b0322b4bb009
505b58b101018e59b0332bb00288b8010054b00488b8020054b012435a5b
58b80119b101018e851bb0124358b10101b80180858d8d1bb10101b80180
858d8d59592b1db0644b5358b0701d59b0324b5358b0901d59002b2b2b2b
73747373732b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2bb1
09322b4bb0645242b1e9044523456861b0e92344b1eae94523456860b0ea
234401732b2b2b2b2b2b7373732b2b2b2b2b2b2b2b2b73732b7374732b2b
2b2b2b2b2b2b732b2b732b2b737373737373737373737373002b752b2b2b
732b742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b732b2b2b2b00000000>
[16229 16081 15693 16133 16229 16293 4563 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 1850 11 <000100c1fe6403b306140015003c402c4f014b024b064f075f015f076f01
6f026f066f077f017f027f067f070e0700011b080f000100000fc004b516
10f4ed332f5d33003f3f3130015d012126021110123721150e0107060215
1412171e011703b3fe87c0b9b9c0017951933f3c4b493e3c9750fe64e101
dc011b011b01dce11d49b97c77fedea4abfeea7c76c14700>Verdana-Bold AddT42Char 
1 0 0 <00020100000007000600000300070014b706020400060204002fcdddcd00
2fcdddcd3130211121112521112101000600fa800500fb000600fa008005
0000>Verdana-Bold AddT42Char 
Verdana-Bold /CharStrings get begin
/parenleft 11 def
end
Verdana-Bold /Encoding get
dup 40 /parenleft put
pop
end
%ADOEndSubsetFont
/XEHCAI+Verdana-Bold /Verdana-Bold findfont ct_VMDictPut
/XEHCAI+Verdana-Bold*1 
[40{/.notdef}rp /parenleft 215{/.notdef}rp]
XEHCAI+Verdana-Bold nf
XEHCAI+Verdana-Bold*1 [0 -6.84 -6.84 0 0 0 ]msf
69.36 593.16 mo
(\()sh
grestore
false sop
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: Verdana-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Verdana-Bold gcheck setglobal} if
1 12150 68 <00020056ffe204b70483000f0030006640470f18052c19184905491c5905
591c6b05690f6b1c76257229702d0d01f11f1f2b1627400d0f37272723a7
2b100da71616301f0130842fba322f32010f281f28022828078419bb3110
f6ed332f5d5d10f6fd3232002f3fed3ffd322f2b1112392fed31305d0135
0e01070e01151416171e01333236170e01070e0123222635343637362437
3534262322060723113624332004151121035249aa2c36390c1817404436
6f2a1d5626357244a0d86e656401289f989459ca2c213901018101330111
fe9b0125ea06150e114135232c1414132c8a163e121817c69a7b9c2d2d26
09065d473f11010f0f29bdcafd04>Verdana-Bold AddT42Char 
Verdana-Bold /CharStrings get begin
/a 68 def
end
Verdana-Bold /Encoding get
dup 97 /a put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XEHCAI+Verdana-Bold*1 
[40{/.notdef}rp /parenleft 56{/.notdef}rp /a 158{/.notdef}rp]
XEHCAI+Verdana-Bold nf
XEHCAI+Verdana-Bold*1 [0 -6.84 -6.84 0 0 0 ]msf
69.36 589.443 mo
(a)sh
gsave
63 593.16 mo
70.68 593.16 li
70.68 581.16 li
63 581.16 li
cp
clp
%ADOBeginSubsetFont: Verdana-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Verdana-Bold gcheck setglobal} if
1 1994 12 <000100a6fe64039806140015003c402c4402400340134414500350136002
60036013601470027003701370140e1200041b1200040104040bc000b617
10f6ed332f5d33003f3f3130015d0110020721353e01373612353402272e
0127352116120398b9c0fe8750983b3e494b3c3f93510179c0b9023cfee5
fe24e11d47c0777c0116aba40122777cb9491de1fe24>Verdana-Bold AddT42Char 
Verdana-Bold /CharStrings get begin
/parenright 12 def
end
Verdana-Bold /Encoding get
dup 41 /parenright put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XEHCAI+Verdana-Bold*1 
[40{/.notdef}rp /parenleft /parenright 55{/.notdef}rp /a 158{/.notdef}rp]
XEHCAI+Verdana-Bold nf
XEHCAI+Verdana-Bold*1 [0 -6.84 -6.84 0 0 0 ]msf
69.36 584.874 mo
(\))sh
grestore
gsave
63 456.12 mo
70.68 456.12 li
70.68 443.88 li
63 443.88 li
cp
clp
XEHCAI+Verdana-Bold*1 [0 -6.84 -6.84 0 0 0 ]msf
69.36 456.12 mo
(\()sh
grestore
%ADOBeginSubsetFont: Verdana-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Verdana-Bold gcheck setglobal} if
1 12404 69 <000200aaffea053e06140010001d003840244501451d570f660f7f057f19
0614960e1009001b98031608118300bc1f06170b8408b91e10f6fd323210
f4ed002f3fed3f3fed31305d0110002322262707211121113e0133321201
342623220607111e01333236053efedbdb5e8e400ffea7016853ad71d5e6
fe8d6683336c312746318f8c0241fef7feb22826380614fdda4252fecdfe
eb96a21f1dfdcc0e0aa8>Verdana-Bold AddT42Char 
Verdana-Bold /CharStrings get begin
/b 69 def
end
Verdana-Bold /Encoding get
dup 98 /b put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XEHCAI+Verdana-Bold*1 
[40{/.notdef}rp /parenleft /parenright 55{/.notdef}rp /a /b 157{/.notdef}rp]
XEHCAI+Verdana-Bold nf
XEHCAI+Verdana-Bold*1 [0 -6.84 -6.84 0 0 0 ]msf
69.36 452.403 mo
(b)sh
gsave
63 456.12 mo
70.68 456.12 li
70.68 443.88 li
63 443.88 li
cp
clp
XEHCAI+Verdana-Bold*1 [0 -6.84 -6.84 0 0 0 ]msf
69.36 447.62 mo
(\))sh
grestore
gsave
63 317.76 mo
70.68 317.76 li
70.68 305.76 li
63 305.76 li
cp
clp
XEHCAI+Verdana-Bold*1 [0 -6.84 -6.84 0 0 0 ]msf
69.36 317.76 mo
(\()sh
grestore
XEHCAI+Verdana-Bold*1 [0 -6.84 -6.84 0 0 0 ]msf
69.36 314.043 mo
(a)sh
gsave
63 317.76 mo
70.68 317.76 li
70.68 305.76 li
63 305.76 li
cp
clp
XEHCAI+Verdana-Bold*1 [0 -6.84 -6.84 0 0 0 ]msf
69.36 309.474 mo
(\))sh
grestore
gsave
63 182.16 mo
70.68 182.16 li
70.68 169.92 li
63 169.92 li
cp
clp
XEHCAI+Verdana-Bold*1 [0 -6.84 -6.84 0 0 0 ]msf
69.36 182.16 mo
(\()sh
grestore
XEHCAI+Verdana-Bold*1 [0 -6.84 -6.84 0 0 0 ]msf
69.36 178.443 mo
(b)sh
gsave
63 182.16 mo
70.68 182.16 li
70.68 169.92 li
63 169.92 li
cp
clp
XEHCAI+Verdana-Bold*1 [0 -6.84 -6.84 0 0 0 ]msf
69.36 173.66 mo
(\))sh
grestore
%ADOBeginSubsetFont: JXJAAA+Verdana Initial
ct_T42Dict begin
-0.559 -0.301 1.445 1.051
 256 array 0 1 255 {1 index exch /.notdef put} for  /JXJAAA+Verdana
Type42DictBegin
[<00010000000c000c000c000c4f532f3272537b1c000000cc000000606376
74204ca241020000012c000001986670676da4ce6d51000002c4000002ba
676c7966cad1e8db000021cc0000349e68656164da7765b6000005800000
0036686865610f270ba7000005b800000024686d7478eef48643000005dc
00000edc6c6f63614be559d3000014b8000007706d617870063704110000
1c28000000206e616d65a2b214fb00001c4800000285707265700870ef40
00001ed0000002fc67646972000000000000000000000000000204110190
00050008059a053300000125059a0533000003a0007802a70800020b0604
030504040204a10006ff4000205b00000010000000004d53202000400020
fffd061efe5900ca080b01ae2000019f00000000045d05d1000000200001
061e061405f005d1047c045d03dd00100000ffe7ffe1fe78fe64fe590394
001f0000009600aa00b900c600ce000000000000000000bc00c200000000
007600b200c000cb0000000000000000000000000081009400a600cc00da
00ef00000000000000000098009e00ab00b0000000000000000000000000
00900098009e00a400a900ae00b300ba00c3000000880091009800a500ac
00000000000000000000006f0087008f009b00a000d3011d000000000000
00c3021401c20000000000e9000c02d10173018e001a002c0044005c0073
007e008600b200c8014c001a003d00440050005c00720078009200b200b9
00c8000000000000000000000000000000000000003d0056005d006a006e
00b100b900c100000000002a003d00540064006a00b100b9000000000000
0071007a008900a100a700bb006f007a00870091009a0000000000000000
00000000000000000000008102210221007400e500b900ca019502c600ac
00a700850614000a000005d1001f0000045d001f00000000ffe10000fe64
fff50000036202f402a2029100af026a004c401555543736322f2e2d2c26
251f141312110d0c0504022c20b003254523452361688a204568208a2344
60442d2c4b525845441b2121592d2c202045684420b001602045b0467668
188a4560442d2cb0122bb0022545b00225456ab0408b60b0022523442121
212d2cb0132bb0022545b00225456ab8ffc08c60b0022523442121212d2c
2069b04061b0008b20b12cc08a8cb8100062602b0c642364615c58b00361
592d2cb100032545685458b0032545b0032545606820b004252344b00425
23441bb00325204568208a2344b00325456860b003252344592d2cb00325
204568208a2344b00325456860b0032523442d2cb00943588721c01bb012
43588745b0112bb0472344b0477ae41b038a45186920b04723448a8a8720
b0a05158b0112bb0472344b0477ae41b21b0477ae4595959182d2c4b5258
45441b2121592d2c462346608a8a462320468a608a61b8ff806223201023
8ab14b4b8a70456020b0005058b00161b8ffba8b1bb0468c59b010606801
3a2d2c2045b003254652583f1b2111592d2c21210c6423648bb84000622d
2c21b08051580c6423648bb82000621bb200402f2b59b002602d2c21b0c0
51580c6423648bb81555621bb200802f2b59b002602d2c0c6423648bb840
00626023212d2cb0134358031b02592d2c4b53234b515a5820458a60441b
2121592d2c4b53234b515a58381b2121592d2cb1020042b123018851b140
0188535a58b910000020885458b202010243604259b12401885158b92000
0040885458b2020202436042b12401885458b2022002436042004b014b52
58b2020802436042591bb940000080885458b202040243604259b9400000
8063b80100885458b202080243604259b94000010063b80200885458b202
100243604259b94000020063b80400885458b20240024360425959595959
2d2cb0024354584b53234b515a58381b2121591b21212121592d00000001
000000050ccd7181a6ec5f0f3cf5001b080000000000aa7e442900000000
c9acc9c7fb86fd930b93086800000009000200000000000000010000080b
fe5200000c2cfb86fd710b930001000000000000000000000000000003b7
080001000000000002d0000002d000000326012303ac00a8068c00c30516
009b089c009505d00073022600a403a200b503a20093051600a7068c00d2
02e9009303a2009902e900fd03a2ffe20516008905160116051600a10516
00a70516004d051600bb051600890516009a0516007a0516007103a2015a
03a200e6068c00fe068c00f5068c010c045d00a0080000b00578001a057c
00c805960073062a00c8050f00c8049900c806340073060300c8035e0089
03a3002c058b00cd047400c806be00c805fc00c8064c007304d300c8064c
0073059000c80578008604ee000005db00b20578001a07e9005c057b0044
04ec0006057b007e03a200ef03a2004603a200ab068c00ba0516fffc0516
015404ce006804fc00b9042b006904fc006c04c4006a02d0004404fc006c
051000b9023200af02c1ffc204bc00c1023200bb07c800b9051000b904db
006a04fc00b904fc006c036a00b9042b006e0327003e051000b104bc003d
068c005604bc003c04bc003d0434005d051400ad03a2017a051400bb068c
00bb0578001a0578001a05960073050f00c805fc00c8064c007005db00b2
04ce006804ce006804ce006804ce006804ce006804ce0068042b006904c4
006a04c4006a04c4006a04c4006a023200a00232ffeb0232fff502320005
051000b904db006a04db006a04db006a04db006a04db006a051000b10510
00b1051000b1051000b1051600bb0456009a0516009f05160089051600ac
045d00b90516008904f600b90800009f0800009f07d000aa0516021d0516
015a068c00f507e0000e064c0073080000a1068c00d7068c00fe068c010c
0516006c052200be0516009505d100bb068c009005a900710516008a045d
0097045d0079068c006b07a4006804db005d045d007103260123068c00d2
068c00860516ffdc068c00f305d10032052800a6052800ae068c00b20578
001a0578001a064c0073088f007807da006a051600990800009903acffed
03ac00960226ffed022600a0068c00d2068c00ac04bc003d04ec000602e4
ff9a0516000003a200ba03a200c20500004405020044051600bb02e900fd
0226fff603acfff60c2c00950578001a050f00c80578001a050f00c8050f
00c8035e0089035e005d035e007e035e0089064c0073064c0073064c0073
05db00b205db00b205db00b2023200bb05160136051600ed051601180516
0113051602210516012d05160161051601560516019f05160132047e0018
0246001805780086042b006e057b007e0434005d03a2017a0634000e04e5
006a04ec000604bc003d04d800c804fc00b9068c00dc068c012304560123
045600cf045600cf080000ab080000ab0800008c0516003c0634007304fc
006c035e008905780086042b006e05960073042b006905960073042b0069
04fc006c0516fffc02e900fd0578001a04ce00680578001a04ce0068062a
00c8052e006c0634000e050f00c804c4006a050f00c804c4006a047400c8
023200ab047400c8025e00bb047400c803ab00bb05fc00c8051000b905fc
00c8051000b9064c007304db006a059000c8036a00b9059000c8036a0092
05780086042b006e04ee00000327003e04ee00000327003e05db00b20510
00b105db00b2051000b1057b007e0434005d057b007e0434005d048800c8
064c0073068d006904fc006c04dd006a041a006d050b006a03f8000a0652
00680516fffc04ff0123045d009a094f00c806f7008904e900af05d80000
02e400d5047500d5089c00950296000f04d5009202d6008302d6008304d5
00b102d600700578001a04ce006805960073042b006905960073042b0069
050f00c804c4006a050f00c804c4006a050f00c804c4006a0634007304fc
006c0634007304fc006c0634007304fc006c060300c8051000b906030020
05100013035e002c0232fff2035e005f0232fffc035e008002320001035e
00890232008e03a3002c02c1ffc2058b00cd04bc00c104bc00c1047400c8
0232000505fc00c8051000b905fc00c8051000b9064c007304db006a064c
007304db006a059000c8036a001b05780086042b006e04ee00000327003e
05db00b2051000b105db00b2051000b105db00b2050b00b105db00b2050b
00b107e9005c068c005604ec000604bc003d026700b90578001a04ce0068
07e0000e07a40068064c007304db005d03a2015a07e9005c068c005607e9
005c068c005607e9005c068c005604ec000604bc003d0226ffed0516ffd0
0516008905be00b1080000ab0800008c0800008a0800009901b000610516
01610516021205160100057800070602000006f6000004510000070c0000
06070000074300000232ffcb0578001a057c00c805a0001a050f00c8057b
007e060300c8035e0089058b00cd057c001a06be00c805fc00c805310072
064c0073060300c804d300c80561007604ee000004ec0006057b004406f7
00b3068c006c035e007e04ec000604fc006c041a006d051000b9023200a0
050d00b104f600b904bc003d03a9006c051000b904fe0089023200bb04bc
00c104bc003d051e00b904bc003d0406006804db006a050000b904100069
050d00b104b80030069300b00682007102320005050d00b104db006a050d
00b106820071050f00c80657ffff048800c8059b007305780086035e0089
035e007e03a3002c08f2001208d300c8068bffff058b00cd04ec00060603
00c80578001a057c00c8057c00c8048800c805f7000a050f00c807c90020
04ed0051060100c8060100c8058b00cd05e0001206be00c8060300c8064c
0073060300c804d300c80596007304ee000004ec0006068d0069057b0044
061700c805b2008e083e00c8085c00c806440000075d00c8057200c8059c
0061084600c805a6002c04ce006804ea007404c200b903c500b904f90009
04c4006a0662003404320041051f00b9051f00b904bc00c104f7001d0592
00b9051900b904db006a051900b904fc00b90446006a03f8000a04bc003d
06ba006f04bc003c052800b904d8008e070200b9071a00b90520000a065b
00b9049100b90460005306b600b904cc004304c4006a0510001303c500b9
0460006a042b006e023200af0232000502c1ffc20750001d075000b90510
001304bc00c104bc003d051900b9048800c803c500b9080000cb096000c8
051900b904560119045600ef045600e6045600b3045600e6045600f30456
00c5000000000000000000000000000000000674007304db006a060d00b2
054700b10000fd440000fd170000fc7c0000fd0905160136051600030516
013605160125051601420516014205160142051601250516020905160136
05160142051601420516014205160142051601360578001a04ce00680578
001a04ce00680578001a04ce00680578001a04ceffe30578001a04ce0068
0578001a04ce00680578001a04ce00680578001a04ce00680578001a04ce
00680578001a04ce00680578001a04ce00680578001a04ce0068050f00c8
04c4006a050f00c804c4006a050f00c804c4006a050f00c804c4006a050f
002904c4fffc050f00c804c4006a050f00c804c4006a050f00c804c4006a
035e0089023200ab035e0089023200af060a007304c4006a0488000e03c5
001307c9002006620034058b00cd04bc00c1058b00cd04bc00c1060300c8
051900b904ec000604bc003d04ec000604bc003d057b004404bc003c05b2
008e04d8008e05b200c8051000b9060a007304c4006a064c007304db006a
051000b9051000000516009903acffed0475000005160066059600730596
007307c800b905fc0034095500c807e9005c06ae0097058b003404ee0000
08000029042b000504d30048068c00f5057c00c8045600be000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000064c007304db006a064c007304db
006a064c007304db006a064c007304dbffe5064c007304db006a064c0073
04db006a064c007304db006a0674007304db006a0674007304db006a0674
007304db006a0674007304db006a0674007304db006a05db00b2051000b1
05db00b2051000b1060d00b2054700b1060d00b2054700b1060d00b20547
00b1060d00b2054700b1060d00b2054700b104ec000604bc003d04ec0006
04bc003d04ec000604bc003d04ec000604bc003d04fc006c0000fc0b0516
008a0907006e05abffe905ab027e05ab027e05abffe905ab027e05abffe9
04000025063400730578001a0578002e0596007305780086042b006e04ee
00000327003e023200a402e900c4060100c8051f00b90000fd710000fdaf
098000730852006a07de007306820072051600de064c007304ef006a0707
001b058300140707001b05830014064c007304fc006c07e9005c068c0056
056c00b90000fb8606250073052c003d0873005c07000056039200ab0392
00ab022100b2022100b2022100b20516014c03a2015a044200c8022600a4
022600a4060302a40519023601680000076c0079051600360000001f001f
001f001f001f004800480048004800480048009c00f90169019e01c801e6
0202022d02c0033a03ec04b5056d061306c60711080e080e080e080e080e
083d083d08a608a608a609970a1f0abd0b240b8f0b8f0b8f0bf50bf50bf5
0bf50cd20d980e550e550e550f1810041004100410781078107810781078
10781078107810b010b010b011e511e511e512be137714161522152215e1
15e115e115e117931866186618661866186619761a051a051a051a051a05
1a051a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f
1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f
1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f
1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f
1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f
1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f
1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f
1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f
1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f
1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f
1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f
1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f
1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f
1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f
1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f
1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f
1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f
1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f
1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f
1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f
1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f
1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f
1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f
1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f
1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f
1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f
1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f
1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f
1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f
1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f
1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f
1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f
1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f
1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f
1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f
1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f
1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f
1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f
1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f
1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f
1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f
1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f
1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f
1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f
1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f
1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f
1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f
1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f
1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f
1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f
1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f
1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f
1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f
1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f
1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f
1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f
1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f1a4f
1a4f1a4f1a4f1a4f0001000003b700780007006b000500020010002f0056
0000020a02fc000300010000000c00960001000000000000003200000001
000000000003000e00320001000000000004000e00400001000000000006
000e004e0001000000000007003b005c0003000104090000006400970003
000104090001001c00fb0003000104090002000e01170003000104090003
001c01250003000104090004001c01410003000104090006001c015d0003
00010409000700760179a92032303131204d6963726f736f667420436f72
706f726174696f6e2e20416c6c205269676874732052657365727665642e
444d4e46504a2b56657264616e61444d4e46504a2b56657264616e61444d
4e46504a2b56657264616e6156657264616e612069732061207472616465
6d61726b206f6620746865204d6963726f736f66742067726f7570206f66
20636f6d70616e6965732e00a9002000320030003100310020004d006900
630072006f0073006f0066007400200043006f00720070006f0072006100
740069006f006e002e00200041006c006c00200052006900670068007400
73002000520065007300650072007600650064002e0044004d004e004600
50004a002b00560065007200640061006e00610052006500670075006c00
6100720044004d004e00460050004a002b00560065007200640061006e00
610044004d004e00460050004a002b00560065007200640061006e006100
44004d004e00460050004a002b00560065007200640061006e0061005600
65007200640061006e006100200069007300200061002000740072006100
640065006d00610072006b0020006f006600200074006800650020004d00
6900630072006f0073006f00660074002000670072006f00750070002000
6f006600200063006f006d00700061006e006900650073002e000000b900
54ffc0401eb229323610b220b240b250b270b280b2a0b2b0b2d0b2e0b20a
c0b2f0b202b8ffc04070b51718361f44010f561f56024f555f55026f5401
9f54af54025153170452531604535215044a495204464937044749320448
493204493539043c3f32043d3f3d043e3f2104433f1d04423f5204413f52
04403f52043f35320432336404333534043534540434351e04d034e034f0
3403b8ffeeb3b4254836b8ffe0b3b4102336b8ffee400db4090f36b41a48
0476b386b302b8fff0b3b3254836b8fffa40ffb3092436b3144804898813
04706c7078020f9cdf9e02409d161936409c161b3640971719364096171b
368685131f0f840f850f8e0f8f0f901f841f8e1f8f2f8e808580888f9190
85908790880f40820910360f721f72024071090c360f6d0120c80120c701
3fc6efc60220c540c50200620100621062024061a061020f5b012d141104
2c1425042b1439042a141304291415041f141e042120430420143c04c91a
45041a1b47041b1a3c041a143204151439041314480412141a0411141a04
70140140144143360f0e2a1f0006010dc34b1f0cc24b1f0ac04b1f09c04b
1f05bc4b1f04bd4b1f03b94b1f02ba4b1f01b64b1f00b74b1fc3c22a1fc0
bf2a1fbd4056bc211fbab9211fb7b6211fc2c3c40dbfc0c10dbcbdbe0cb9
babb0cb6b7b80c10bc80bc0240b980b9020fb63fb64fb67fb6040fb62fb6
3fb66fb67fb6bfb6cfb6ffb6080a0937040c0d0205040203020201000250
0501b801ff01b0124b004b5442b013014b004b5342b109322b4bb0645242
858d8d1db0964b5258b0801d59b808004b5458b001b0018e59b0084b5358
b001b0018e59002b2b2b2b2b737473732b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2bb00345b006456861b006234473b00345b00e456861b00e23
44b00e45b00f456861b00f23442b01b0144568b01423442b732b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b7373737373737373732b732b732b2b2b2b2b73
732b2b2b2b732b2b2b2b00752b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b73747373742b73742b2b00>
[13471 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd

1 0 3 <> JXJAAA+Verdana AddT42Char 
1 144 11 <000100b5fe64030f06140015005640430901090719011907280328054f01
480348054f075f015f076f016f077f01780278067f07120701010c7a0401
0830000100000f0c0c0d02550f0c090902550f1f04881610f4ed2b2b332f
5d3c5d003f3f3130015d0123260211101237331506060706021514121716
1617030fe5b1c4c4b1e551933f3c4b493e3c9a4dfe64cb01e0012d012d01
e0cb0a49bf7f7bfed8a4abfee4807bc74500>JXJAAA+Verdana AddT42Char 
1 312 12 <00010093fe6402ed06140015006a40390603061315031513260126032613
261547014003401347155003501360036013790076027003701376141512
01040c750001123f040104040bb8fff4b40c0d02550bb8fff4400f090902
550b1f000c0f0f025500921710f62bed2b2b332f5d3c5d003f3f3130015d
0110020723353636373612353402272626273533161202edc4b1e54d9b3b
3e494a3d3f9351e5b1c4023cfed3fe20cb0a45c77b80011caba401287b7f
bf490acbfe20>JXJAAA+Verdana AddT42Char 
1 912 16 <000100990231030902e600030020401401420f0201020f054f004f055f00
5f05050000022f332f5d002f5ded3130012135210309fd9002700231b500
>JXJAAA+Verdana AddT42Char 
1 972 17 <000100fd000001ec011d00030020b602560108002d01b8ffe8400a0f0f02
552f013f0102012f5d2bed003fed31302123113301ecefef011d>JXJAAA+Verdana AddT42Char 
1 1028 18 <0001ffe2fed0035c06140003003640250301000501160125013800490044
0156016701770186010a011202032f02010200010000022f332f003f2f5d
31300187ed5d87c009012301035cfd33ad02ca0614f8bc074400>JXJAAA+Verdana AddT42Char 
1 1114 19 <00020089ffe1048f05ef000b002300a940223601390b340c3b123b18341e
4501490b440c4b124b18441e0c154909022149030a0fb8fff8b40b0b4255
0fb8fffcb40c0c42550fb8fff4b60c0c02550f2100b8fff0b40f0f025500
b8fff440270b0b025500180c0c0255009e250f251f25021b080b0b42551b
040c0c42551b0c0c0c02551b2106b8fff040130f0f025506100909025506
0c0b0b025506982410f62b2b2bed2b2b2b5d10f62b2b2bed2b2b2b003fed
3fed31305d01100221200211101221201201363635342627262623220607
0606151416171616333236048ffbfef8fef4f7fa0109010cf7fef9231919
2423795f5e7b24221916242179645e7c02e9fe6ffe89017c018a018d017b
fe7ffcb551db9a98e04e4d4e4e4f4aee8e9cd2534e524e00>JXJAAA+Verdana AddT42Char 
1 1408 20 <000101160000043c05d6000f00ba40190d080b0b42550e080b0b42550d10
0c0c42550e100c0c425504b8fffcb40d0d425503b8fffc40390d0d425505
4606060c030e034801080f111f110205021f0f010f0f0c0e0c0c0c02550e
0d0c0c06550e20023f036f03700303030c1010025503b8ffe0400b0f0f02
5503160909025503b8fff4401d0b0b0255031e0c0c025503060d0d025503
100d0d065503100c0c0655032f2b2b2b2b2b2b2b2b5d33ed2b2b39322f5d
2f335d003ffd323f332fed3130012b2b2b2b2b2b21213521112135323637
363637331121043cfcda0136feca3f90252e35049b01309803e688151419
4d41fac2>JXJAAA+Verdana AddT42Char 
1 1652 21 <000100a10000049105f0002000fd4051501f601f02050306111603151124
113b05380d350e3f1d3f1e391f4b05480d450e4f1d4f1e491f5f035d045d
055b0956115f195e1b5d1c5f1d5f1e6a036406651162156f1e700274117f
1a7f1c7f1e2503b8ffe8b40c0c065502b8ffe840310c0c0655000f100f2d
082f1c300f400f060f400c0c02550f400c0d06550f400c0c42550f0f0b4a
1302021f4a01081f0208b8fff8b40b0b425508b8fffc40190c0c42550821
160c0f0f0255160c0909025516040b0b025516b8fff440190c0c02551616
0c0c06551616209e220f221f2202101002992110f6322f5d10f6322f2b2b
2b2b2bed2b2b1239003ffd323fed332f2b2b2b5d31302b2b5d015d212135
363637363635342623220607233536363332041514060706060706060721
0491fc1069d35bc08e99895bd4650a47ed6fe501042b2a27694b6be46303
21d15ab459badb7f74834042d2233addbd5593423e784969c554>JXJAAA+Verdana AddT42Char 
1 2008 22 <000100a7ffe1047c05f0003d00e240580b0b052f1a0b152f290b262f293c
3c0b35143122342f4a0b45144322432f56015905590b552f6a0b662f6a3c
780b762f74357b3c1a343a443a023b3a1e491f012d112d022d2d294a1f09
31020f0d1f0d020d0d114a090a23b8fff8b40b0b425523b8fffc401c0c0c
42552321370c0c0c025537040d0d025537060c0c0655371e2e16b8fff8b4
0b0b425516b8fffc40240c0c42551621032e1e3a37040c031a0c0c025503
0c0c0c065503a03f0f3f1f3f020c9a3e10e65d10e62b2b11173910ed2b2b
2f2f2f2b2b2bed2b2b003fed332f5d3f1239ed332f5d2ffd39395d31305d
011616151406070606232226273533161633323637363635342627262623
233533323635342627262623220607233536363332161716161514060715
1616040e303e4a434bcb797cf04d0f55e66b3f8e2c2e2d332d2d804a5a46
98b52e292b623e5fd65f0a47ed6f6da643484aaf77307c02cd2b826766aa
3f46433b23d1384a2a292c6a5150691e1f17a67f7a36511a1a14443ed123
3b282c30885b7cb9180e0833>JXJAAA+Verdana AddT42Char 
1 2410 23 <0002004d000004b305d1000a000d0134406908080b0b425509080b0b4255
01080b0b425502080b0b425508100c0c425509100c0c425501100c0c4255
02100c0c425508040d0d425509040d0d425501040d0d425502040d0d4255
040d140d240d340d440d700d060c180c0c06550c0d480606070c0607090d
490105b8ffc040190c0c0655050503070303083f0a4f0a020a0f0f1f0f02
070c04b8fff4b40c0c025504b8fff3400e0c0c065504200a090d064f0601
01b8ffe4400b0b0b0255010a0c0c025501b8fffab40d0d025501b8ffee40
320c0c065501010f061f063f060306261010025506020f0f025506180909
0255060c0b0b0255060c0c0c025506180c0c0655062f2b2b2b2b2b2b5d33
2f2b2b2b2b5d12393333ed2b2b39395d2f5d003f3f12392f2b3cfd321239
393130018710fd04c02b015d2b2b2b2b2b2b2b2b2b2b2b2b012311231121
350133113321110104b3ddc0fd3702d1b8ddfe63fdbf01a3fe5d01a3e603
48fc7202a0fd6000>JXJAAA+Verdana AddT42Char 
1 2778 24 <000100bbffe1048505d1002a00c9405521040d0d425522040d0d42550a08
1a082b083d0835113d164b0844115a0854296a087a080c1d1d1a490f251f
2540250325400d0d425525214a25061e020f0a1f0a020a0a0e4a060a2022
080b0c425522204f1d011db8ffec40180b0b02551d160c0c02551d0e0d0d
02551d100c0c06551d14b8fff8b40b0b425514b8fffc401b0c0c42551421
00201d0900160c0c0255009f2c0f2c1f2c02099b2b10e65d10e62b113939
10ed2b2b2f2b2b2b2b5ded2b2f003fed332f5d3f1239ed2f2b5dfd322f31
305d012b2b01140607060623222627353316163332363736363534262726
26232206071121152111363633321617161604854c4248c7837ae24e0e52
dc6a4785342c2d352f34955c58a33b0380fd412b5a2179b64c505801d968
be41464b3324d3344928322b784f4d6a20261f180c02ffaffe7404042934
37ae>JXJAAA+Verdana AddT42Char 
1 4124 32 <000200f5016a059703ae00030007003540200554060154060f0201024009
0130094009020405012f004000020000400101012f5d332f5d1239395d5d
002f5d33ed2fed313001213521112135210597fb5e04a2fb5e04a2030ea0
fdbca000>JXJAAA+Verdana AddT42Char 
1 4218 34 <000200a0000003ed05ef001c0020006940470f221f2224140335184f024f
034f0544185c0554186904691064187418741c0c0870090109061a1e1616
12341a02081f551e08202b1f1f061f7f0901090f1509172000010000172f
332f5d1239ed2f5ded332fed003fed333ffd322f111239395d2f31305d01
5d0114060706060715231136363736363534262322060723353636333216
0123353303ed4639389252b34197303a4099796cc1380a46d760d7f9fe75
cccc047362993b39642fe1013125582d346f56716f4423cc1b2bd1fae2d3
>JXJAAA+Verdana AddT42Char 
1 4428 37 <000300c80000052b05d1001500240033013b4012050c150c270c55025615
7f190612112c341eb8ffc040100f0f02551e1e071d3408032d34070816b8
fff840090b0b42551615122c0fb8fff4400b0b0b02550f200c0c02550fb8
fff240140d0d02550f260d0d06550f200c0c06550f0f0725b8fffcb40c0c
425525b8fff8400d0b0b42552515000c1010025500b8ffe6b40f0f025500
b8ffe8b40c0c025500b8fff2b40d0d025500b8ffe4b40d0d065500b8ffe8
40220c0c06550071350f354035021e2c080b0b42552c040c0d42552c1407
0e1010025507b8fffcb40b0b025507b8ffda400b0f0f0255070809090255
07b8ffeeb40c0c025507b8ffeab40d0d025507b8fff1b40d0d065507b8ff
f1b60c0c0655076c3410f62b2b2b2b2b2b2b2bfd2b2b325d10f62b2b2b2b
2b2bed2b2b12392f2b2b2b2b2b1239ed2b003fed3fed12392f2bed393931
30015d011406070606232111213216171616151406071516160134262726
26232311213236373636133426272626232111213236373636052b544754
c99bfdf001b9a3a24a524a6c5a97aefeb324282f8663ec01005d6e2f2f27
7f3647308962fec9010682a635383401ca6faa37423805d118262b875e6a
952d081fcb0204364a171b0dfe52131e1e5ffd9a5a6a25190ffdd61b2427
6400>JXJAAA+Verdana AddT42Char 
1 4910 38 <00010073ffe5054605ec002a008b406e05010d09061416011b0914152515
361543145b08580a580e5b105b28600361147002760f70141316161a3412
022a2a2634060a1600712c0f2c010f2c1f2c2f2c3f2c6f2c0520080b0b42
5520040c0c425520150c0c0b0b42550c080c0c42550c140b0b02550c1c09
0902550c682b10f62b2b2b2bed2b2b5d5d10f63c003fed332f3fed332f31
30015d250606070606232224272602353412373624333216171523262623
2206070606151416171616333236373305463759483d8f56a2fef762606c
68625f010da478ef920f7bf28a71b547454d554346bb688ffa6d0e6c182a
17131b5b615f0125c2b801226461663a49eb675e494d4be5969de2474a47
6262>JXJAAA+Verdana AddT42Char 
1 5182 39 <000200c8000005b205d1000e001d00d54015391249126902680d04163408
03173407087600010fb8fff840130b0b42550f15000a1010025500060b0b
025500b8ffe2b40f0f025500b8fff4b40909025500b8ffeab40c0c025500
b8fff440250d0d065500741f0f1f2f1f401f601f0417080b0b425517040c
0d42551714070e1010025507b8fffcb40b0b025507b8ffda400b0f0f0255
07080909025507b8ffeeb40c0c025507b8ffeab40d0d025507b8fff1b40d
0d065507b8fff1b60c0c0655076c1e10f62b2b2b2b2b2b2b2bed2b2b5d10
f62b2b2b2b2b2bed2b5d003fed3fed3130015d0114020706062321112132
0417161207342627262623231133323637363605b2b19366fbcdfe880174
da01015998aacf7a7958c68ababa8fd5596f6f02e7cbfeb65b3f3805d13f
375ffec4d6aff0453227fb832a3947e8>JXJAAA+Verdana AddT42Char 
1 5498 40 <000100c80000049d05d1000b009eb70935000610060206b8ffc040300f0f
0255060601053502030a350108040008010800730d0f0d010609080b0b42
5509040c0d42550914010e1010025501b8fffcb40b0b025501b8ffda400b
0f0f025501080909025501b8ffeeb40c0c025501b8ffeab40d0d025501b8
ffe9b40d0d065501b8ffe9b60c0c0655016c0c10f62b2b2b2b2b2b2b2bfd
2b2b325d10f63c5d3c003fed3fed12392f2b71ed31302121112115211121
15211121049dfc2b03d5fcf1030ffcf1030f05d1b0fe68b0fdd7>JXJAAA+Verdana AddT42Char 
1 5918 44 <00010089000002d505d1000b00a1b90004fffcb40d0d425503b8fffcb40d
0d425504b8fff8b40b0b425503b8fff8b40b0b425504b8fffcb40c0c4255
03b8fffc40270c0c425509043206030a033201080d6d0a080b5a0a140305
025a030c10100255030c0b0b025503b8ffdeb40f0f025503b8ffe4b40909
025503b8fffeb40c0c025503b8ffeeb60d0d0255036d0c10f62b2b2b2b2b
2bf43210fdf43210e6003ffd323ffd323130012b2b2b2b2b2b2121353311
2335211523113302d5fdb4c3c3024cc3c39804a19898fb5f>JXJAAA+Verdana AddT42Char 
1 6122 48 <000100c8000005f605d1000c01804067560a0138023805360a6f0260036f
05600a7f0270037f05700a0b5509560a5a0b0364037403750903050a0203
090602000204400c0c425504620d0d425504401010025504400909025504
400d0d02550004100444045404040404070b0903010708090a0b030502b8
fffcb40c0d425502b8fff8b40b0b425502b8fffa400d0f0f02550214001e
1010025500b8fff4405f0b0b0255000c0f0f0255001009090255000a0c0c
0255001a0d0d025500180d0d0655000c0c0c065500780e0f0e1f0e500e03
05080c0c425505040d0d425505080b0b4255050c09090255050c0c0c0255
05040c0c0655051307101010025507b8fffcb40b0b025507b8ffda400b0f
0f025507080909025507b8ffeeb40c0c025507b8ffeab40d0d025507b8ff
eab40d0d065507b8ffeeb60c0c0655076c0d10f62b2b2b2b2b2b2b2bed2b
2b2b2b2b2b5d10f62b2b2b2b2b2b2b2bed2b2b2b111739003f3c3f3c1239
2f5d2b2b2b2b2b435458b434046a04025d59435458b26404015d59121739
3130015d72005d722123110123011123112101012105f6c6fe6276fe65b9
010e018d018001130503fc970369fafd05d1fcc3033d>JXJAAA+Verdana AddT42Char 
1 6564 49 <000100c80000053805d10009015fb6010c0d0d425506b8fff440440d0d42
550c071f0734074507510761077107077606010f0102061f011506340644
0653066b0160067f0170060b0c010406025a015506020207010806030104
0806010207b8fff8b40c0d425507b8fff8b40b0b425507b8fff8b4090902
5507b8fff4b40c0c025507b8fffab60c0c0655071300b8fff4b410100255
00b8fff4b40b0b025500b8ffe240510f0f025500080909025500120c0c02
5500260d0d0255000c0d0d0655000a0c0c065500780b0f0b400b0202080c
0d425502080b0b4255020809090255020c0c0c025502060c0c0655021304
101010025504b8fffcb40b0b025504b8ffda400b0f0f0255040809090255
04b8ffeeb40c0c025504b8ffeab40d0d025504b8fff2b40d0d065504b8ff
eeb60c0c0655046c0a10f62b2b2b2b2b2b2b2bed2b2b2b2b2b5d10f62b2b
2b2b2b2b2b2bfd2b2b2b2b2b113939003f3c3f3c12393931300172715d5d
005d012b2b212301112311210111330538f5fd3eb901330284b90534facc
05d1fb4004c0>JXJAAA+Verdana AddT42Char 
1 6960 50 <00020073ffe105da05f00017002300f84022040004060b0c0b1217001706
190c19125701570553075f0b580d58115f1353171015b8fff04018101002
5509101010025576097915021b3415022134090a18b8fff8b40b0b425518
b8fffcb40c0c425518b8fffcb60c0c0655181503b8ffe8b40d0d425503b8
fffcb40b0b025503b8ffe6b40909025503b8ffe2b40c0c025503b8fff040
4c0d0d02550373250f25010f251f253f25031e040c0c42551e080b0b4255
1e040c0c06551e150f080c0c42550f0c0b0b42550f120b0b02550f160909
02550f060c0c02550f040c0c06550f682410f62b2b2b2b2b2bed2b2b2b5d
5d10f62b2b2b2b2bed2b2b2b003fed3fed5d2b2b3130015d011612151402
070606232224272602353412373624333216131000232200111000333200
051e5b6163595cfba19dfeff5a5a61605c5801059aa0ff47fefce1e3fefd
0108dede0107052664fedeb8b8fedd6165666863630120b9b60121676268
69fd610122013bfec5fedefedbfec9013700>JXJAAA+Verdana AddT42Char 
1 7338 53 <000200c80000059805d10010001f011b405408011d012d013a01391d450f
4814481d5a01560f59146f016902600a650b7e01750b110201b300100010
071a3402400d0d425502400d0d025502400d0d0655400201020205183407
030105080f211f2140210311b8fff8400a0b0b425511150f0d010db8fff8
401d090902550d1c0c0c02550d0c0d0d06550d180c0c06550d0d10200001
00b8ffea40220d0d0655001903040c0d425503080b0b425503090c0c0655
031400050e1010025505b8fffcb40b0b025505b8ffda400b0f0f02550508
0909025505b8ffeeb40c0c025505b8ffeab40d0d025505b8fff1b60c0c06
55056c2010f62b2b2b2b2b2b2b32fd2b2b2b322f2b5d39392f2b2b2b2b5d
ed2b5d003f3c3fed12392f5d2b2b2bed123931300187107afd18c0015d21
210121112311213216171616151406071334262726262323113332363736
360598fefffe0efee9c601a187b448515ba28e612d342b7650e9c85e8c31
2d2b0250fdb005d1232d339b77a1d93701a34063221d17fdce212d2a6d00
>JXJAAA+Verdana AddT42Char 
1 7728 54 <00010086ffe5050205ec00300142b9002ffff4b4101002552db8fff4b410
1002552eb8fff4409e10100255180e10100255170e10100255160e101002
55150c10100255140a101002550b09031f00231b08141f29082818241f24
2f390836103813351f362a4a0845104913451f4a27442a5802551b551f55
2d6b19661b651f662b602f7b16701f7020742a742d86122309400e103708
400e1037060200111a28041d06212125341d020a0a0e34060a2128080b0b
425528040c0c425528151a16090902551ab8fff0b50d0d02551a11b8fff8
b40b0b425511b8fffc400b0c0c4255111500211a0900b8ffe6b409090255
00b8fff0400f0c0c02550074320f32703202096a3110e65d10e62b2b1139
3910ed2b2b2f2b2bed2b2b2f003fed332f3fed332f111217394354584015
58115728681167287911762889118628971199280a5d5931302b2b5d2b2b
2b2b2b2b2b2b011406070606232224273533160433323635342627262627
262635342433320417152326242322061514161716161716160502514950
d596a1feff850e71012882b8cd61634baf62c6bf013cf39d0106650e55fe
eb919fc1607940ec52a6a801a957aa3b40483c3bf85e668a73635e1a141a
142acba3bbef3c2cea485f84685d6a1c0e28152cb200>JXJAAA+Verdana AddT42Char 
1 8200 57 <0001001a0000055e05d1000600bcb90006fffc400b0b0b425504040b0b42
5506b8fff4b40c0c425504b8fffeb40d0d425506b8fffd406a0d0d425547
014802020504050706570686060306140000010507045704860403041403
0203080144014b02580273017c02060005027503010303020845004a0302
020103040024003a005a006a00740006006e080f08010f08010b032b0335
03550365037b030603640710e65d5d5d10f65d1139395d003f3f5d123939
3130015d8710fd5dc08710fd5d08c0015d2b2b2b2b2b0101210133010105
5efde2fef8fde2d401d301d305d1fa2f05d1fae2051e>JXJAAA+Verdana AddT42Char 
1 9162 71 <0002006cffe10443061400130020014a40253c1a301c38204f1a421c4820
58066806701009120102110518410e0401081e42050a111402b8fff8b40d
0d425502b8fff0b40c0c425502b8fff8b40b0b425502b8fff4b409090255
02b8fff4b40c0c025502b8fff4400d0c0c0655021a22400f0f025500b8ff
f640231010025500080b0b025500100f0f0255000c09090255002a0c0c02
55000a0d0d025500b8ffee40510f0f0655000f0c0c0655000f0d0d065500
92221f223f22021b080b0b42551b040d0d42551b100c0c42551b0c0c0c02
551b100c0c06551b1b08080d0d4255080c0b0b4255080a0c0c425508180b
0b025508b8fffe402b0f0f0255080c09090255081009090255080c0c0c02
5508040d0d0255080c0c0c065508080d0d065508852110f62b2b2b2b2b2b
2b2b2b2b2bed2b2b2b2b2b5d10f62b2b2b2b2b2b2b2b2b2bfd2b2b2b2b2b
2b3232003fed3f3fed1239393f31305d2123350606232202113436373636
333216171133031126262322061514163332360443bc51b067c8eb514544
b56158884bbcbc4c78479eb0889650a475464e013401118ede4e4c502527
01e4faff0281221adccac7cf4700>JXJAAA+Verdana AddT42Char 
1 9596 72 <0002006affe60460047c0018001f0106402726042b0d30043b0d3c1e4304
4b0d4b1e5a0d50166a0d6017780d7a1e0e013c1f1f0f1c3d15040bb8ffe8
40190c0c06550b0b073f0f090c0c21400909025521400c0c025519b8fff6
b40c0c025519b8fff0b40c0c425519b8fff8400d0d0d4255191a00200c0c
025500b8fff440680d0d0655008f210f211f213f21031f01040d0d425501
100c0c425501080b0b4255010c0c0c0255010a0c0c0655011b12080d0d42
55120c0b0b4255120a0c0c425512180b0b025512100909025512080c0c02
5512040d0d0255120a0c0c065512020d0d065512852010f62b2b2b2b2b2b
2b2b2bfd2b2b2b2b2b325d10f42b2bed2b2b2b2b2b332f003fed332f2b3f
ed12392fed31305d01211416171616333236373315060623200011100033
321215272626232206070460fcc93e36348f5672e7310a5fc66dfeeafec8
012bf4e2f5b701939697b30c021b67993130305b2ccd2836012d01150112
0142fef8f32a94a2b284>JXJAAA+Verdana AddT42Char 
1 10820 76 <000200af0000018305db000300070157b90003fff8b40d0d425500b8fff8
b40d0d425506b8fffcb40b0b425505b8fffc40110b0b425507040b0b4255
04040b0b425502b8fff8b40d0d425501b8fff8b40d0d425506b8fff4b40d
0d425505b8fff4b40d0d425507b8fffcb40d0d425504b8fffcb40d0d4255
02b8fff4b40c0c425501b8fff4b40c0c425506b8fff4b40c0c425505b8ff
f440110c0c425507040c0c425504040c0c425501b8ffc040170c0d425501
4402400b0d370203060505087f0901099200b8fffc402c0c0c0255006004
0c09090255040c0c0c0255040609090655040c0c0c0655041a01020f0f02
5501607f050105b8ffdeb41010025505b8ffe0400b0f0f0255050c090902
5505b8ffeeb40d0d025505b8fff6b40c0c025505b8fffcb40909065505b8
ffffb60c0c065505880810f62b2b2b2b2b2b2b5de42bfd2b2b2b2be42be6
5d003f3f3f2bed2b3130012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b01
233533032311330183d4d40cbcbc0518c3fa25045d00>JXJAAA+Verdana AddT42Char 
1 12492 86 <0001006effe503d704780033018640570602091b1502191b26092a243209
3c2442094c245e055d165321562f54326f056c166020642f6532147a057f
1174207928742b8a01880d851a872894019a1b0b000e1829041e03802201
22400b0b02552222263e1e0407b8ffc0400c0b0b025507070b3e0309210e
b8fffa403d09090255290c0c0c0255290c0c0c065529080b0b425529100c
0c425529040d0d4255291b35400c0c0255181009090255180a0c0c025518
080909065518b8fff6b50c0c0655180eb8fff4b40c0c02550eb8fff4b40c
0c06550eb8fff8b40b0b42550eb8fff0b40c0c42550eb8fffc400b0d0d42
550e1b0021180700b8ffeab40b0b025500b8ffeab41010025500b8fff440
0b0909025500140c0c025500b8ffeeb40909065500b8fff8b40c0c065500
b8fff840270d0d0655008e350f351f353f355f357f350507160b0b025507
1609090655071a0c0c065507863410e62b2b2b5d10e62b2b2b2b2b2b2b11
393910ed2b2b2b2b2b2f2b2b2b2b2bed2b2b2b2b2b2b2f003fed332f2b3f
ed332f2b5d1112173931305d015d01140623222627353316163332363534
272627262627262635343637363633321617152326262322061514171617
16161716171603d7fddb7ccf460a59da647c8c26266c288135937b393a38
ad6b64cd440a48ce63678e2b2a5e34812b834747014299c43b23d3434f50
564222221809180e27976e457a302f373123c935494f4e452323160c180a
1e494a00>JXJAAA+Verdana AddT42Char 
1 13036 87 <0001003effea02fd059e001b00c740540c051a052b05030b10073e0d0b0a
051b1b173f03094f1d7f1d020e008c1d080d10080b0b425510080d0d4255
10100c0c4255100c09090255100c0c0c0255100409090655100c0c0c0655
101a0a0807400d103707b8ffde40111010025507200f0f0255070c090902
5507b8fff6b40c0c025507b8ffee40110d0d0255071c0f0f065507040909
065507b8fff1400d0c0c065507170d0d065507881c10f62b2b2b2b2b2b2b
2b2b2b3232fd2b2b2b2b2b2b2b322f10f6325d003ffd322f3f3333fd322f
31305d250606232226351123353311331121152111141617161633323637
3302fd357d31abb27f7fbc0184fe7c0818164d4f2e64160a0a0e12b8cb02
529e0141febf9efe0358632b28251b09>JXJAAA+Verdana AddT42Char 
1 13322 93 <0001005d000003e3045d00090067b603080d0d425508b8fff8403e0d0d42
5515083a0335084a0345085c03540860087f0370080a0707033e06050202
083e01080408030207070402098e0b1f0b3f0b5f0b6f0b7f0b0502840a10
e65d10e41139392f1239392f003ffd322f3ffd322f3130015d2b2b212135
0121352115012103e3fc7a028bfd830367fd72029f8b03359d86fcc8>JXJAAA+Verdana AddT42Char 
1 0 0 <00020100000007000600000300070014b706020400060204002fcdddcd00
2fcdddcd3130211121112521112101000600fa800500fb000600fa008005
0000>JXJAAA+Verdana AddT42Char 
JXJAAA+Verdana /CharStrings get begin
/space 3 def
/parenleft 11 def
/parenright 12 def
/hyphen 16 def
/period 17 def
/slash 18 def
/zero 19 def
/one 20 def
/two 21 def
/three 22 def
/four 23 def
/five 24 def
/equal 32 def
/question 34 def
/B 37 def
/C 38 def
/D 39 def
/E 40 def
/I 44 def
/M 48 def
/N 49 def
/O 50 def
/R 53 def
/S 54 def
/V 57 def
/d 71 def
/e 72 def
/i 76 def
/s 86 def
/t 87 def
/z 93 def
end
JXJAAA+Verdana /Encoding get
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 61 /equal put
dup 63 /question put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 73 /I put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 82 /R put
dup 83 /S put
dup 86 /V put
dup 100 /d put
dup 101 /e put
dup 105 /i put
dup 115 /s put
dup 116 /t put
dup 122 /z put
pop
end
%ADOEndSubsetFont
/XEHCAJ+Verdana /JXJAAA+Verdana findfont ct_VMDictPut
/XEHCAJ+Verdana*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period 
/slash /zero /one /two /three /four /five 7{/.notdef}rp 
/equal /.notdef /question 2{/.notdef}rp /B /C /D /E 
3{/.notdef}rp /I 3{/.notdef}rp /M /N /O 2{/.notdef}rp /R 
/S 2{/.notdef}rp /V 13{/.notdef}rp /d /e 3{/.notdef}rp /i 
9{/.notdef}rp /s /t 5{/.notdef}rp /z 133{/.notdef}rp]
XEHCAJ+Verdana nf
XEHCAJ+Verdana*1 [0 -6.84 -6.84 0 0 0 ]msf
86.04 720.24 mo
(?-sided test?)
[-3.72778 -3.10535 -3.5636 -1.87421 -4.26129 -4.0766 -4.26135 -2.40771 -2.69495 -4.0766 -3.5636 -2.69495 
0 ]ysh
86.1597 653.64 mo
(1122)
[-135.121 -139.202 -137.282 0 ]ysh
%ADOBeginSubsetFont: FPFBAA+Verdana Initial
ct_T42Dict begin
-0.559 -0.301 1.445 1.051
 256 array 0 1 255 {1 index exch /.notdef put} for  /FPFBAA+Verdana
Type42DictBegin
[<00010000000c000c000c000c4f532f3272537b1c000000cc000000606376
74204ca241020000012c000001986670676da4ce6d51000002c4000002ba
676c79663c536557000021cc000004ea68656164da7765b6000005800000
0036686865610f270ba7000005b800000024686d7478eef48643000005dc
00000edc6c6f6361e61be6d8000014b8000007706d617870063704110000
1c28000000206e616d650734aafa00001c4800000285707265700870ef40
00001ed0000002fc67646972000000000000000000000000000204110190
00050008059a053300000125059a0533000003a0007802a70800020b0604
030504040204a10006ff4000205b00000010000000004d53202000400020
fffd061efe5900ca080b01ae2000019f00000000045d05d1000000200001
061e061405f005d1047c045d03dd00100000ffe7ffe1fe78fe64fe590394
001f0000009600aa00b900c600ce000000000000000000bc00c200000000
007600b200c000cb0000000000000000000000000081009400a600cc00da
00ef00000000000000000098009e00ab00b0000000000000000000000000
00900098009e00a400a900ae00b300ba00c3000000880091009800a500ac
00000000000000000000006f0087008f009b00a000d3011d000000000000
00c3021401c20000000000e9000c02d10173018e001a002c0044005c0073
007e008600b200c8014c001a003d00440050005c00720078009200b200b9
00c8000000000000000000000000000000000000003d0056005d006a006e
00b100b900c100000000002a003d00540064006a00b100b9000000000000
0071007a008900a100a700bb006f007a00870091009a0000000000000000
00000000000000000000008102210221007400e500b900ca019502c600ac
00a700850614000a000005d1001f0000045d001f00000000ffe10000fe64
fff50000036202f402a2029100af026a004c401555543736322f2e2d2c26
251f141312110d0c0504022c20b003254523452361688a204568208a2344
60442d2c4b525845441b2121592d2c202045684420b001602045b0467668
188a4560442d2cb0122bb0022545b00225456ab0408b60b0022523442121
212d2cb0132bb0022545b00225456ab8ffc08c60b0022523442121212d2c
2069b04061b0008b20b12cc08a8cb8100062602b0c642364615c58b00361
592d2cb100032545685458b0032545b0032545606820b004252344b00425
23441bb00325204568208a2344b00325456860b003252344592d2cb00325
204568208a2344b00325456860b0032523442d2cb00943588721c01bb012
43588745b0112bb0472344b0477ae41b038a45186920b04723448a8a8720
b0a05158b0112bb0472344b0477ae41b21b0477ae4595959182d2c4b5258
45441b2121592d2c462346608a8a462320468a608a61b8ff806223201023
8ab14b4b8a70456020b0005058b00161b8ffba8b1bb0468c59b010606801
3a2d2c2045b003254652583f1b2111592d2c21210c6423648bb84000622d
2c21b08051580c6423648bb82000621bb200402f2b59b002602d2c21b0c0
51580c6423648bb81555621bb200802f2b59b002602d2c0c6423648bb840
00626023212d2cb0134358031b02592d2c4b53234b515a5820458a60441b
2121592d2c4b53234b515a58381b2121592d2cb1020042b123018851b140
0188535a58b910000020885458b202010243604259b12401885158b92000
0040885458b2020202436042b12401885458b2022002436042004b014b52
58b2020802436042591bb940000080885458b202040243604259b9400000
8063b80100885458b202080243604259b94000010063b80200885458b202
100243604259b94000020063b80400885458b20240024360425959595959
2d2cb0024354584b53234b515a58381b2121591b21212121592d00000001
000000050ccd5ed33cb85f0f3cf5001b080000000000aa7e442900000000
c9acc9c7fb86fd930b93086800000009000200000000000000010000080b
fe5200000c2cfb86fd710b930001000000000000000000000000000003b7
080001000000000002d0000002d000000326012303ac00a8068c00c30516
009b089c009505d00073022600a403a200b503a20093051600a7068c00d2
02e9009303a2009902e900fd03a2ffe20516008905160116051600a10516
00a70516004d051600bb051600890516009a0516007a0516007103a2015a
03a200e6068c00fe068c00f5068c010c045d00a0080000b00578001a057c
00c805960073062a00c8050f00c8049900c806340073060300c8035e0089
03a3002c058b00cd047400c806be00c805fc00c8064c007304d300c8064c
0073059000c80578008604ee000005db00b20578001a07e9005c057b0044
04ec0006057b007e03a200ef03a2004603a200ab068c00ba0516fffc0516
015404ce006804fc00b9042b006904fc006c04c4006a02d0004404fc006c
051000b9023200af02c1ffc204bc00c1023200bb07c800b9051000b904db
006a04fc00b904fc006c036a00b9042b006e0327003e051000b104bc003d
068c005604bc003c04bc003d0434005d051400ad03a2017a051400bb068c
00bb0578001a0578001a05960073050f00c805fc00c8064c007005db00b2
04ce006804ce006804ce006804ce006804ce006804ce0068042b006904c4
006a04c4006a04c4006a04c4006a023200a00232ffeb0232fff502320005
051000b904db006a04db006a04db006a04db006a04db006a051000b10510
00b1051000b1051000b1051600bb0456009a0516009f05160089051600ac
045d00b90516008904f600b90800009f0800009f07d000aa0516021d0516
015a068c00f507e0000e064c0073080000a1068c00d7068c00fe068c010c
0516006c052200be0516009505d100bb068c009005a900710516008a045d
0097045d0079068c006b07a4006804db005d045d007103260123068c00d2
068c00860516ffdc068c00f305d10032052800a6052800ae068c00b20578
001a0578001a064c0073088f007807da006a051600990800009903acffed
03ac00960226ffed022600a0068c00d2068c00ac04bc003d04ec000602e4
ff9a0516000003a200ba03a200c20500004405020044051600bb02e900fd
0226fff603acfff60c2c00950578001a050f00c80578001a050f00c8050f
00c8035e0089035e005d035e007e035e0089064c0073064c0073064c0073
05db00b205db00b205db00b2023200bb05160136051600ed051601180516
0113051602210516012d05160161051601560516019f05160132047e0018
0246001805780086042b006e057b007e0434005d03a2017a0634000e04e5
006a04ec000604bc003d04d800c804fc00b9068c00dc068c012304560123
045600cf045600cf080000ab080000ab0800008c0516003c0634007304fc
006c035e008905780086042b006e05960073042b006905960073042b0069
04fc006c0516fffc02e900fd0578001a04ce00680578001a04ce0068062a
00c8052e006c0634000e050f00c804c4006a050f00c804c4006a047400c8
023200ab047400c8025e00bb047400c803ab00bb05fc00c8051000b905fc
00c8051000b9064c007304db006a059000c8036a00b9059000c8036a0092
05780086042b006e04ee00000327003e04ee00000327003e05db00b20510
00b105db00b2051000b1057b007e0434005d057b007e0434005d048800c8
064c0073068d006904fc006c04dd006a041a006d050b006a03f8000a0652
00680516fffc04ff0123045d009a094f00c806f7008904e900af05d80000
02e400d5047500d5089c00950296000f04d5009202d6008302d6008304d5
00b102d600700578001a04ce006805960073042b006905960073042b0069
050f00c804c4006a050f00c804c4006a050f00c804c4006a0634007304fc
006c0634007304fc006c0634007304fc006c060300c8051000b906030020
05100013035e002c0232fff2035e005f0232fffc035e008002320001035e
00890232008e03a3002c02c1ffc2058b00cd04bc00c104bc00c1047400c8
0232000505fc00c8051000b905fc00c8051000b9064c007304db006a064c
007304db006a059000c8036a001b05780086042b006e04ee00000327003e
05db00b2051000b105db00b2051000b105db00b2050b00b105db00b2050b
00b107e9005c068c005604ec000604bc003d026700b90578001a04ce0068
07e0000e07a40068064c007304db005d03a2015a07e9005c068c005607e9
005c068c005607e9005c068c005604ec000604bc003d0226ffed0516ffd0
0516008905be00b1080000ab0800008c0800008a0800009901b000610516
01610516021205160100057800070602000006f6000004510000070c0000
06070000074300000232ffcb0578001a057c00c805a0001a050f00c8057b
007e060300c8035e0089058b00cd057c001a06be00c805fc00c805310072
064c0073060300c804d300c80561007604ee000004ec0006057b004406f7
00b3068c006c035e007e04ec000604fc006c041a006d051000b9023200a0
050d00b104f600b904bc003d03a9006c051000b904fe0089023200bb04bc
00c104bc003d051e00b904bc003d0406006804db006a050000b904100069
050d00b104b80030069300b00682007102320005050d00b104db006a050d
00b106820071050f00c80657ffff048800c8059b007305780086035e0089
035e007e03a3002c08f2001208d300c8068bffff058b00cd04ec00060603
00c80578001a057c00c8057c00c8048800c805f7000a050f00c807c90020
04ed0051060100c8060100c8058b00cd05e0001206be00c8060300c8064c
0073060300c804d300c80596007304ee000004ec0006068d0069057b0044
061700c805b2008e083e00c8085c00c806440000075d00c8057200c8059c
0061084600c805a6002c04ce006804ea007404c200b903c500b904f90009
04c4006a0662003404320041051f00b9051f00b904bc00c104f7001d0592
00b9051900b904db006a051900b904fc00b90446006a03f8000a04bc003d
06ba006f04bc003c052800b904d8008e070200b9071a00b90520000a065b
00b9049100b90460005306b600b904cc004304c4006a0510001303c500b9
0460006a042b006e023200af0232000502c1ffc20750001d075000b90510
001304bc00c104bc003d051900b9048800c803c500b9080000cb096000c8
051900b904560119045600ef045600e6045600b3045600e6045600f30456
00c5000000000000000000000000000000000674007304db006a060d00b2
054700b10000fd440000fd170000fc7c0000fd0905160136051600030516
013605160125051601420516014205160142051601250516020905160136
05160142051601420516014205160142051601360578001a04ce00680578
001a04ce00680578001a04ce00680578001a04ceffe30578001a04ce0068
0578001a04ce00680578001a04ce00680578001a04ce00680578001a04ce
00680578001a04ce00680578001a04ce00680578001a04ce0068050f00c8
04c4006a050f00c804c4006a050f00c804c4006a050f00c804c4006a050f
002904c4fffc050f00c804c4006a050f00c804c4006a050f00c804c4006a
035e0089023200ab035e0089023200af060a007304c4006a0488000e03c5
001307c9002006620034058b00cd04bc00c1058b00cd04bc00c1060300c8
051900b904ec000604bc003d04ec000604bc003d057b004404bc003c05b2
008e04d8008e05b200c8051000b9060a007304c4006a064c007304db006a
051000b9051000000516009903acffed0475000005160066059600730596
007307c800b905fc0034095500c807e9005c06ae0097058b003404ee0000
08000029042b000504d30048068c00f5057c00c8045600be000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000064c007304db006a064c007304db
006a064c007304db006a064c007304dbffe5064c007304db006a064c0073
04db006a064c007304db006a0674007304db006a0674007304db006a0674
007304db006a0674007304db006a0674007304db006a05db00b2051000b1
05db00b2051000b1060d00b2054700b1060d00b2054700b1060d00b20547
00b1060d00b2054700b1060d00b2054700b104ec000604bc003d04ec0006
04bc003d04ec000604bc003d04ec000604bc003d04fc006c0000fc0b0516
008a0907006e05abffe905ab027e05ab027e05abffe905ab027e05abffe9
04000025063400730578001a0578002e0596007305780086042b006e04ee
00000327003e023200a402e900c4060100c8051f00b90000fd710000fdaf
098000730852006a07de007306820072051600de064c007304ef006a0707
001b058300140707001b05830014064c007304fc006c07e9005c068c0056
056c00b90000fb8606250073052c003d0873005c07000056039200ab0392
00ab022100b2022100b2022100b20516014c03a2015a044200c8022600a4
022600a4060302a40519023601680000076c0079051600360000001f001f
001f001f001f001f001f001f001f001f001f001f001f001f001f001f001f
001f001f001f001f001f001f001f001f001f001f001f001f001f001f001f
001f001f001f001f001f001f001f001f001f001f001f001f001f001f001f
001f001f001f001f001f001f001f001f001f001f001f001f001f001f001f
001f001f001f001f001f001f001f001f001f001f001f001f001f001f001f
001f001f001f001f001f001f001f001f001f001f001f001f001f001f001f
001f001f001f001f001f001f001f001f001f001f001f001f001f001f001f
001f001f001f001f001f001f001f001f001f001f001f001f001f001f001f
001f001f001f001f001f001f001f001f001f001f001f001f001f001f001f
001f001f001f001f001f001f001f001f001f001f001f001f001f001f001f
001f001f001f001f001f001f001f001f001f001f001f001f001f001f001f
001f001f001f001f001f001f001f001f001f001f001f001f001f001f001f
001f001f001f001f001f001f001f001f001f001f001f001f001f001f001f
001f001f001f001f001f001f001f001f001f001f001f001f001f001f001f
001f001f001f001f001f001f001f001f001f001f001f001f001f001f001f
001f001f001f001f001f001f001f001f001f001f001f001f001f001f001f
001f001f001f001f001f001f001f001f001f001f001f001f001f001f001f
001f001f001f001f001f001f001f001f001f001f001f001f001f001f001f
001f001f001f001f001f001f001f001f001f001f001f001f001f001f001f
001f001f001f001f001f001f001f001f001f001f001f001f001f001f001f
00bf017b017b017b017b017b017b017b017b017b017b017b017b017b017b
017b017b017b017b017b017b017b017b017b017b017b017b017b017b017b
017b017b017b017b017b017b017b017b017b017b017b017b017b017b017b
017b017b017b017b017b017b017b017b017b017b017b017b017b017b017b
017b017b017b017b017b017b017b017b017b017b017b017b017b017b017b
017b017b017b017b017b017b017b017b017b017b017b017b017b017b017b
017b017b017b017b017b017b017b017b017b017b017b017b017b017b017b
017b017b017b017b017b017b017b017b017b017b017b017b017b017b017b
017b017b017b017b017b017b017b017b017b017b017b017b017b017b017b
017b017b017b017b017b017b017b017b017b017b017b017b017b017b0275
027502750275027502750275027502750275027502750275027502750275
027502750275027502750275027502750275027502750275027502750275
027502750275027502750275027502750275027502750275027502750275
027502750275027502750275027502750275027502750275027502750275
027502750275027502750275027502750275027502750275027502750275
027502750275027502750275027502750275027502750275027502750275
027502750275027502750275027502750275027502750275027502750275
027502750275027502750275027502750275027502750275027502750275
027502750275027502750275027502750275027502750275027502750275
027502750275027502750275027502750275027502750275027502750275
027502750275027502750275027502750275027502750275027502750275
027502750275027502750275027502750275027502750275027502750275
027502750275027502750275027502750275027502750275027502750275
027502750275027502750275027502750275027502750275027502750275
027502750275027502750275027502750275027502750275027502750275
027502750275027502750275027502750275027502750275027502750275
027502750275027502750275027502750275027502750275027502750275
027502750275027502750275027502750275027502750275027502750275
027502750275027502750275027502750275027502750275027502750275
027502750275027502750275027502750275027502750275027502750275
027502750275027502750275027502750275027502750275027502750275
027502750275027502750275027502750275027502750275027502750275
027502750275027502750275027502750275027502750275027502750275
027502750275027502750275027502750275027502750275027502750275
027502750275027502750275027502750275027502750275027502750275
027502750275027502750275027502750275027502750275027502750275
027502750275027502750275027502750275027502750275027502750275
027502750275027502750275027502750275027502750275027502750275
027502750275027502750275027502750275027502750275027502750275
027502750275027502750275027502750275027502750275027502750275
027502750275027502750275027502750275027502750275027502750275
027502750275027502750275027502750275027502750275027502750275
027502750275027502750275027502750275027502750275027502750275
02750275027502750001000003b700780007006b000500020010002f0056
0000020a02fc000300010000000c00960001000000000000003200000001
000000000003000e00320001000000000004000e00400001000000000006
000e004e0001000000000007003b005c0003000004090001001c00970003
000004090002000e00b30003000004090003001c00c10003000004090004
001c00dd0003000004090006001c00f90003000104090000006401150003
00010409000700760179a92032303131204d6963726f736f667420436f72
706f726174696f6e2e20416c6c205269676874732052657365727665642e
444d4e4650492b56657264616e61444d4e4650492b56657264616e61444d
4e4650492b56657264616e6156657264616e612069732061207472616465
6d61726b206f6620746865204d6963726f736f66742067726f7570206f66
20636f6d70616e6965732e0044004d004e004600500049002b0056006500
7200640061006e00610052006500670075006c006100720044004d004e00
4600500049002b00560065007200640061006e00610044004d004e004600
500049002b00560065007200640061006e00610044004d004e0046005000
49002b00560065007200640061006e006100a90020003200300031003100
20004d006900630072006f0073006f0066007400200043006f0072007000
6f0072006100740069006f006e002e00200041006c006c00200052006900
67006800740073002000520065007300650072007600650064002e005600
65007200640061006e006100200069007300200061002000740072006100
640065006d00610072006b0020006f006600200074006800650020004d00
6900630072006f0073006f00660074002000670072006f00750070002000
6f006600200063006f006d00700061006e006900650073002e000000b900
54ffc0401eb229323610b220b240b250b270b280b2a0b2b0b2d0b2e0b20a
c0b2f0b202b8ffc04070b51718361f44010f561f56024f555f55026f5401
9f54af54025153170452531604535215044a495204464937044749320448
493204493539043c3f32043d3f3d043e3f2104433f1d04423f5204413f52
04403f52043f35320432336404333534043534540434351e04d034e034f0
3403b8ffeeb3b4254836b8ffe0b3b4102336b8ffee400db4090f36b41a48
0476b386b302b8fff0b3b3254836b8fffa40ffb3092436b3144804898813
04706c7078020f9cdf9e02409d161936409c161b3640971719364096171b
368685131f0f840f850f8e0f8f0f901f841f8e1f8f2f8e808580888f9190
85908790880f40820910360f721f72024071090c360f6d0120c80120c701
3fc6efc60220c540c50200620100621062024061a061020f5b012d141104
2c1425042b1439042a141304291415041f141e042120430420143c04c91a
45041a1b47041b1a3c041a143204151439041314480412141a0411141a04
70140140144143360f0e2a1f0006010dc34b1f0cc24b1f0ac04b1f09c04b
1f05bc4b1f04bd4b1f03b94b1f02ba4b1f01b64b1f00b74b1fc3c22a1fc0
bf2a1fbd4056bc211fbab9211fb7b6211fc2c3c40dbfc0c10dbcbdbe0cb9
babb0cb6b7b80c10bc80bc0240b980b9020fb63fb64fb67fb6040fb62fb6
3fb66fb67fb6bfb6cfb6ffb6080a0937040c0d0205040203020201000250
0501b801ff01b0124b004b5442b013014b004b5342b109322b4bb0645242
858d8d1db0964b5258b0801d59b808004b5458b001b0018e59b0084b5358
b001b0018e59002b2b2b2b2b737473732b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2bb00345b006456861b006234473b00345b00e456861b00e23
44b00e45b00f456861b00f23442b01b0144568b01423442b732b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b7373737373737373732b732b732b2b2b2b2b73
732b2b2b2b732b2b2b2b00752b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b73747373742b73742b2b00>
[1259 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 62 302 <0002006cffe10443047c0013002000d940162a032a203c1a301c38204f1a
421c4820580668060a10b8ffc040150b1037120502110518410e0401081e
42050a111402b8fff4b40909025502b8fff4b60c0c0255021a00b8fff640
231010025500080b0b025500100f0f0255000c09090255002a0c0c025500
0a0d0d025500b8ffec400b0f0f0655000a0d0d065500b8ffec402f090906
550092221f223f22021b100c0c02551b1b08160b0b025508180909025508
060c0c025508020d0d025508852110f62b2b2b2bed2b5d10f62b2b2b2b2b
2b2b2b2bfd2b2b3232003fed3f3fed1239393f31302b5d21233506062322
02113436373636333216173533031126262322061514163332360443bc51
b067c8eb514544b56158884bbcbc4c78479eb0889650a475464e01340111
8ede4e4c502c2734fcb6027c221fdccac7cf4700>FPFBAA+Verdana AddT42Char 
1 0 0 <00020100000007000600000300070014b706020400060204002fcdddcd00
2fcdddcd3130211121112521112101000600fa800500fb000600fa008005
0000>FPFBAA+Verdana AddT42Char 
FPFBAA+Verdana /CharStrings get begin
/g302 302 def
end
FPFBAA+Verdana /Encoding get
dup 32 /g302 put
pop
end
%ADOEndSubsetFont
/XEHCAK+Verdana /FPFBAA+Verdana findfont ct_VMDictPut
/XEHCAK+Verdana*1 
[32{/.notdef}rp /g302 223{/.notdef}rp]
XEHCAK+Verdana nf
XEHCAK+Verdana*1 [0 -6.84 -6.84 0 0 0 ]msf
94.4395 700.321 mo
( )sh
XEHCAJ+Verdana*1 [0 -6.84 -6.84 0 0 0 ]msf
94.5592 653.64 mo
(0.050.050.050.05)
[-4.35022 -2.48975 -4.35028 -123.937 -4.35022 -2.48975 -4.35028 -128.017 -4.35025 -2.48975 -4.35025 -126.097 
-4.35028 -2.48975 -4.35028 0 ]ysh
103.679 708.36 mo
(z)sh
XEHCAJ+Verdana*1 [0 -4.56 -4.56 0 0 0 ]msf
105 704.76 mo
(\(1-)
[-2.07019 -2.90015 0 ]ysh
XEHCAK+Verdana*1 [0 -4.56 -4.56 0 0 0 ]msf
105 697.72 mo
( )sh
XEHCAJ+Verdana*1 [0 -4.56 -4.56 0 0 0 ]msf
105 694.879 mo
(/2\))
[-2.07019 -2.90021 0 ]ysh
XEHCAJ+Verdana*1 [0 -6.84 -6.84 0 0 0 ]msf
103.8 653.64 mo
(=NORMSINV\(1-B4/B3\)=NORMSINV\(1-C4/C3\)=NORMSINV\(1-D4/D3\)=NORMSINV\(1-E4/E3\))
[-5.59503 -5.11633 -5.38312 -4.75385 -5.76611 -4.67865 -2.87964 -5.11633 -4.67859 -3.10535 -4.35022 -3.10535 
-4.69226 -4.35028 -3.10529 -4.69226 -4.35028 -59.4115 -5.59509 -5.1163 -5.38309 -4.75385 -5.76617 -4.67859 
-2.87967 -5.1163 -4.67862 -3.10532 -4.35028 -3.10529 -4.77432 -4.35025 -3.10535 -4.77429 -4.35025 -63.3178 
-5.59509 -5.11633 -5.38306 -4.75385 -5.76617 -4.67859 -2.8797 -5.11633 -4.67859 -3.10529 -4.35028 -3.10535 
-5.27356 -4.35028 -3.10535 -5.27356 -4.35028 -60.4095 -5.59503 -5.11633 -5.38312 -4.75385 -5.76617 -4.67859 
-2.8797 -5.11633 -4.67859 -3.10529 -4.35028 -3.10535 -4.32288 -4.35028 -3.10529 -4.32294 -4.35022 0 
]ysh
gsave
106.8 700.32 mo
114.36 700.32 li
114.36 696.12 li
106.8 696.12 li
cp
clp
%ADOBeginSubsetFont: FPFBAA+Verdana AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal FPFBAA+Verdana gcheck setglobal} if
1 758 451 <000200b9fe64048d061400180037014f403e16200d1037070f4a1b432643
3756267929062e200d0f3733200d103705200d10371615203e5f21012121
032b3e0c0135400309080c15120f200120281b12b8ffecb41010025512b8
ffeeb40f0f025512b8ffe440150d0d025512140b0c025512120909025512
12200819b8fff8b609090255191b00b8ffd6b41010025500b8fff4b40f0f
025500b8fff8b40d0d025500b8ffd0b40c0c025500b8fff2b40b0b025500
b8fff8401a090902550090391f390132070c09090255070c0c0c0255071a
08b8ffdeb41010025508b8ffe0400b0f0f0255080c0909025508b8ffeeb4
0d0d025508b8fff6b40c0c025508b8ffecb40f0f065508b8ffecb40d0d06
5508b8fff6400d0c0c065508060909065508883810f62b2b2b2b2b2b2b2b
2bfd2b2b325d10f62b2b2b2b2b2bed2b1239392f2b2b2b2b2bed2f5d1239
003f3fed3fed12392f5ded393931302b2b2b5d012b011400232226271123
113436333216171616151406071516160734262726262323353332363736
3635342623220607060615111616333236048dfef3cd4fb03fbcfddf5a95
3b39448b7f9fbcc2453a3b924924244282272e2d8a6d496821201e429648
95a101bccafef82c2afe2405d2e0fe2b2e2b8a5b7fbd25111ac797596f1f
2016a01d1e2262557074352c2c753efca2261f9d>FPFBAA+Verdana AddT42Char 
FPFBAA+Verdana /CharStrings get begin
/g451 451 def
end
FPFBAA+Verdana /Encoding get
dup 33 /g451 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XEHCAK+Verdana*1 
[32{/.notdef}rp /g302 /g451 222{/.notdef}rp]
XEHCAK+Verdana nf
XEHCAK+Verdana*1 [0 -6.84 -6.84 0 0 0 ]msf
113.04 700.32 mo
(!)sh
grestore
XEHCAJ+Verdana*1 [0 -6.84 -6.84 0 0 0 ]msf
113.16 653.64 mo
(0.20.20.20.2)
[-4.35022 -2.48975 -128.285 -4.35022 -2.48975 -132.365 -4.35028 -2.48975 -130.445 -4.35022 -2.48975 0 
]ysh
121.44 704.04 mo
(1-)
[-4.35028 0 ]ysh
gsave
115.2 704.04 mo
122.76 704.04 li
122.76 692.4 li
115.2 692.4 li
cp
clp
XEHCAK+Verdana*1 [0 -6.84 -6.84 0 0 0 ]msf
121.44 696.585 mo
(!)sh
grestore
%ADOBeginSubsetFont: JXJAAA+Verdana AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal JXJAAA+Verdana gcheck setglobal} if
1 3110 25 <00020089ffe104a705ed0022003700b84033060d160d3925333133374925
423143375f01560d50205021652175310e1a0329491d1313174a1d030f02
3549030a1a2c2f1223b8fff8b40b0b425523b8fffc400a0c0c4255232100
120900b8ffeeb40f0f025500b8fff4400b0b0b0255000c0c0c025500b8ff
ec401b0d0d0255009c390f391f39022f080b0b42552f040c0c42552f2109
b8fff4b60f0f025509983810f62bed2b2b5d10e62b2b2b2b113910ed2b2b
2f123939003fed3f1239fd322f2fed123931305d01140023222627260235
341237362433321617152326262322000736363332161716160734262726
2623220607060615141617161633323604a7fed5d96eb445565d555d5801
16b93b50290a1c713bd7ff001554a36b5f914c5859cb373f2e703d55924d
020241392e6b3f91a601e3e3fee14443530112c1c6013277717f0a0dbf0f
1bfef3e5333523353dba8d5d7a2d2014282a16291f9eb7352c29b100>JXJAAA+Verdana AddT42Char 
JXJAAA+Verdana /CharStrings get begin
/six 25 def
end
JXJAAA+Verdana /Encoding get
dup 54 /six put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XEHCAJ+Verdana*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period 
/slash /zero /one /two /three /four /five /six 
6{/.notdef}rp /equal /.notdef /question 2{/.notdef}rp /B /C /D 
/E 3{/.notdef}rp /I 3{/.notdef}rp /M /N /O 2{/.notdef}rp 
/R /S 2{/.notdef}rp /V 13{/.notdef}rp /d /e 3{/.notdef}rp 
/i 9{/.notdef}rp /s /t 5{/.notdef}rp /z 133{/.notdef}rp]
XEHCAJ+Verdana nf
XEHCAJ+Verdana*1 [0 -6.84 -6.84 0 0 0 ]msf
121.56 653.64 mo
(=1-B6=1-C6=1-D6=1-E6)
[-5.59503 -4.35028 -3.10529 -4.69232 -117.381 -5.59503 -4.35028 -3.10532 -4.77429 -121.374 -5.59509 -4.35022 
-3.10535 -5.27362 -118.959 -5.59509 -4.35022 -3.10535 -4.32288 0 ]ysh
130.68 705.96 mo
(z)sh
XEHCAJ+Verdana*1 [0 -4.56 -4.56 0 0 0 ]msf
132 702.36 mo
(\(1-)
[-2.07025 -2.90015 0 ]ysh
XEHCAK+Verdana*1 [0 -4.56 -4.56 0 0 0 ]msf
132 695.32 mo
(!)sh
XEHCAJ+Verdana*1 [0 -4.56 -4.56 0 0 0 ]msf
132 692.492 mo
(\))sh
XEHCAJ+Verdana*1 [0 -6.84 -6.84 0 0 0 ]msf
130.8 653.64 mo
(=NORMSINV\(1-B6\)=NORMSINV\(1-C6\)=NORMSINV\(1-D6\)=NORMSINV\(1-E6\))
[-5.59503 -5.11633 -5.38312 -4.75385 -5.76611 -4.67865 -2.87964 -5.11633 -4.67859 -3.10535 -4.35022 -3.10535 
-4.69226 -4.35028 -71.5552 -5.59503 -5.11633 -5.38312 -4.75385 -5.76611 -4.67862 -2.87967 -5.11633 -4.67859 
-3.10535 -4.35022 -3.10535 -4.77429 -4.35028 -75.5485 -5.59503 -5.11633 -5.38312 -4.75385 -5.76611 -4.67859 
-2.8797 -5.11633 -4.67859 -3.10535 -4.35022 -3.10535 -5.27362 -4.35022 -73.134 -5.59509 -5.11627 -5.38312 
-4.75385 -5.76617 -4.67859 -2.87964 -5.11633 -4.67859 -3.10535 -4.35028 -3.10529 -4.32294 -4.35022 0 
]ysh
148.44 740.04 mo
(si)
[-3.5636 0 ]ysh
gsave
142.2 740.04 mo
149.76 740.04 li
149.76 719.64 li
142.2 719.64 li
cp
clp
%ADOBeginSubsetFont: JXJAAA+Verdana AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal JXJAAA+Verdana gcheck setglobal} if
1 10284 74 <0002006cfe590443047c002300300182402d3d133e2a322c3a3044094b13
4c2a422c4b305b015d055a166a016c056a167c0570201122051221152840
1e0407b8ffc0b40d0d425507b8ffc0b40d0d025507b8ffc040150f0f0655
07070b40030d2e4115070f060106212412b8fff8b40b0b425512b8fff8b4
0d0d425512b8fff0400b0c0c425532400f0f025512b8fff4b40909025512
b8fff4b40c0c025512b8fff4400a0c0c0655121a00061800b8fff6407510
10025500080b0b025500100f0f0255000c09090255002a0c0c0255000a0d
0d0255001a0f0f0655000f0c0c0655000f0d0d06550092321f323f32022b
080b0b42552b040d0d42552b100c0c42552b080c0c02552b0c0c0c06552b
1b180c0b0b425518080d0d4255180a0c0c425518100b0b025518b8fffe40
250f0f0255181609090255180c0c0c025518060d0d0255180c0c0c065518
060d0d065518853110f42b2b2b2b2b2b2b2b2b2bed2b2b2b2b2b5d10e42b
2b2b2b2b2b2b2b2b113910fd2b2b2b2b2b2b2b32322f5d003fed3fed332f
2b2b2b3fed1239393f31305d251000212226273533161633323637363635
350606232202113436373636333216173733031126262322061514163332
360443fefefef459a9520a2ec864607e23231e559b78c8eb514641ba5c61
83490cb0bc4b81409bb2849952a57ffee4fef61917c012352e29276e4466
44430121010790d14c474f272830fcd60261221dd0c6bcc23f00>JXJAAA+Verdana AddT42Char 
JXJAAA+Verdana /CharStrings get begin
/g 74 def
end
JXJAAA+Verdana /Encoding get
dup 103 /g put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XEHCAJ+Verdana*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period 
/slash /zero /one /two /three /four /five /six 
6{/.notdef}rp /equal /.notdef /question 2{/.notdef}rp /B /C /D 
/E 3{/.notdef}rp /I 3{/.notdef}rp /M /N /O 2{/.notdef}rp 
/R /S 2{/.notdef}rp /V 13{/.notdef}rp /d /e /.notdef 
/g /.notdef /i 9{/.notdef}rp /s /t 5{/.notdef}rp /z 
133{/.notdef}rp]
XEHCAJ+Verdana nf
XEHCAJ+Verdana*1 [0 -6.84 -6.84 0 0 0 ]msf
148.44 734.599 mo
(g)sh
grestore
%ADOBeginSubsetFont: JXJAAA+Verdana AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal JXJAAA+Verdana gcheck setglobal} if
1 3468 26 <0001009a0000049505d10006006eb90003fff8b40c0c425502b8fff8b40c
0c425503b8fffb40360b0b425509010a02240148014b0258027903070301
000120020203000002034a050302080f081f087b020303000202040f0001
0000042f332f5d12392f12395d003f3ffd11392f3130018710ed87c0015d
012b2b2b010123012135210495fd5ed602cdfcb003fb04f2fb0e0522af00
>JXJAAA+Verdana AddT42Char 
1 8544 68 <00020068ffe1041d04780026003301ceb9001efff8b40c0c42551db8fff0
40420c0c42550c0a0423190a1523042b120c0c06552c120c0c06552d120c
0c0655590e511e5c2c690e601d6f2d7b0a7a14701d7b2c0a0208283d3011
401102111120081cb8ffca40170c0c42554f1c011c1c183f20043141080a
01080f1d011db8fff6b70c0c42551d112702b8fff8b40d0d425502b8fff8
b40b0b425502b8fff0400b0c0c425535400909025502b8fff4b409090255
02b8fff4b40c0c025502b8fff440160c0c0655021a001d0b000610100255
00120b0b025500b8ffe640110f0f0255001809090255001a0d0d025500b8
fffcb40c0c025500b8ffe0400b0f0f065500120c0c065500b8fff4401509
090655000f0d0d06550091350f351f353f35032eb8fff8b40d0d02552eb8
fff440190f0f06552e080c0c06552e040d0d42552e080b0c42552e1b0bb8
fffa4043101002550b0c0b0b02550b080d0d02550b1c090902550b0c0d0d
02550b060c0c02550b16090906550b060c0c06550b0a0d0d06550b0c0c0c
42550b0c0b0b42550b853410f62b2b2b2b2b2b2b2b2b2b2bed2b2b2b2b2b
5d10e62b2b2b2b2b2b2b2b2b2b113910fd2b2b2b2b2b2b2b32322f2b5d00
3f3fed3fed332f5d2b1112392f5ded123931305d2b2b2b015d002b2b2123
350606070606232226353436373624373534262726262322060723353636
3332161716161503110606070606151416333236041dbb1955282f7a5297
d26d6566011ea42d2a28703d4ab6610a37d06576af403f42bb56e9445164
747763a477113d12171fc89b7f9d2d2d20081d40541817102725bf0f2427
2f2e926cfe1d013705141317615560614d00>JXJAAA+Verdana AddT42Char 
1 9966 73 <0001004400000312061e001800f0b90010fff0b40c0c42550fb8fff0407d
0c0c42551a400f0f02551a400d0d0255081439147505030000043f15000b
0e3e0811050d080009400902090f090e00080b080b0b42550b080d0d4255
0b100c0c42550b0c090902550b0c0c0c02550b06090906550b0c0c0c0655
0b010d0d06550b1a0f11000e400d10370e16101002550e200f0f02550e0c
090902550eb8fff6400b0c0c02550e2e0d0d02550eb8ffee400b0f0f0655
0e12090906550eb8fffb400d0c0c06550e200d0d06550e891910f62b2b2b
2b2b2b2b2b2b2b323232fd2b2b2b2b2b2b2b2b322f12392f2f5d003f3f33
fd323ffd322f3130015d2b2b2b2b01232626232206151521152111231123
35333534363332161703120a1f6426796d0153feb3bc7f7fc6bb3f652a05
5e09136b8c269efc4103bf9e25c7d50c0800>JXJAAA+Verdana AddT42Char 
1 11202 80 <000100b900000717047c002b02e3b90007fff8b40b0b425506b8fff8b40b
0b425505b8fff8b40b0b425504b8fff8b40b0b425503b8fff8b40b0b4255
02b8fff8b40b0b425501b8fff8b40b0b425507b8fff8b40d0d425506b8ff
f8b40d0d425505b8fff8b40d0d425504b8fff8b40d0d425503b8fff8b40d
0d425502b8fff8b40d0d425501b8fff8b40d0d425507b8fff0b40c0c4255
06b8fff0b40c0c425505b8fff0b40c0c425504b8fff0b40c0c425503b8ff
f0b40c0c425502b8fff0b40c0c425501b8fff0404f0c0c42550324032913
24132944204426b72a07b62501251f1d1c0817422822041d0501101c0840
2d011f2d302d402d502d702d05000c09090255000c0c0c02550008090906
55000c0c0c0655001a2db8ffc040170f0f02552d400c0c02550118101002
5501080b0b025501b8ffeab40f0f025501b8fff440110909025501300c0c
0255011c0d0d025501b8fff2b40f0f065501b8fff0403d0909065501020d
0d0655016110250b1c0f080b0b42550f080d0d42550f100c0c42550f0c09
0902550f0c0c0c02550f08090906550f0c0c0c06550f1a10b8fff8b40b0b
425510b8fffcb40d0d425510b8fff8b40c0c425510b8fff6400b10100255
10080b0b025510b8ffd240110f0f025510260c0c0255100a0d0d025510b8
fff8b40f0f065510b8fff8b40909065510b8fffbb40c0c065510b8ffff40
330d0d0655101f1a080b0b42551a080d0d42551a100c0c42551a0c090902
551a0c0c0c02551a08090906551a0c0c0c06551a1a1cb8ffdeb410100255
1cb8ffe6400b0f0f02551c0c090902551cb8fff6b40c0c02551cb8ffeeb4
0d0d02551cb8ffee400b0f0f06551c0a090906551cb8fffcb40c0c06551c
b8fffc400e0d0d06551c611f104010801003102f5df42b2b2b2b2b2b2b2b
2bfd2b2b2b2b2b2b2b32102b2b2b2b2b2b2b2b2b2b2b2bfd2b2b2b2b2b2b
2b11393910f42b2b2b2b2b2b2b2b2b2b2bed2b2b2b2b5d5d003f3c3c3f3f
3cfd32111239395d31305d012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b212311342627262623220607161615112311342627262623220607
11231133153636333216173636333216150717bc0d151756514f9e4f0304
bc0d151756514d9b4dbcbc58af63729f2772bc6bb8af027c4886282b2c4f
3d173d1efd35027c4a85282b2b4c3bfcbe045d7c495260556055dfc8>JXJAAA+Verdana AddT42Char 
1 12070 81 <000100b90000045f047c0016015c401303151615751503100d084213040e
05010d0802b8fff8b40d0d425502b8fff0b40c0c425502b8fff8b40b0b42
5502b8fff4b40909025502b8fff4b40c0c025502b8fff8b40909065502b8
fff4b60c0c0655021a00b8ffeab41010025500b8fffc40170b0b02550004
0f0f025500080909025500220c0c025500b8fffeb40d0d025500b8ffe040
110f0f0655000d0c0c0655000a0d0d065500b8fff8403a09090655009118
1f18601802100b080d0d42550b100c0c42550b080b0b42550b0c0c0c0255
0b0c090902550b08090906550b0c0c0c06550b1a0db8ffdeb4101002550d
b8ffe0b40f0f02550db8ffeeb40d0d02550db8fff6400b0c0c02550d0c09
0902550db8ffea400b0f0f06550d08090906550db8fff1b40c0c06550db8
fff1b60d0d06550d881710f62b2b2b2b2b2b2b2b2bfd2b2b2b2b2b2b2b32
5d10f62b2b2b2b2b2b2b2b2b2bed2b2b2b2b2b2b2b003f3c3f3fed123931
305d2123113426272626232206071123113315363633321615045fbc1218
195e4b4da84dbcbc58bc63b5be027c4d87262a294c3bfcbe045d7c4952da
cd00>JXJAAA+Verdana AddT42Char 
JXJAAA+Verdana /CharStrings get begin
/seven 26 def
/a 68 def
/f 73 def
/m 80 def
/n 81 def
end
JXJAAA+Verdana /Encoding get
dup 55 /seven put
dup 97 /a put
dup 102 /f put
dup 109 /m put
dup 110 /n put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XEHCAJ+Verdana*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period 
/slash /zero /one /two /three /four /five /six 
/seven 5{/.notdef}rp /equal /.notdef /question 2{/.notdef}rp /B /C 
/D /E 3{/.notdef}rp /I 3{/.notdef}rp /M /N /O 
2{/.notdef}rp /R /S 2{/.notdef}rp /V 10{/.notdef}rp /a 2{/.notdef}rp 
/d /e /f /g /.notdef /i 3{/.notdef}rp /m 
/n 4{/.notdef}rp /s /t 5{/.notdef}rp /z 133{/.notdef}rp]
XEHCAJ+Verdana nf
XEHCAJ+Verdana*1 [0 -6.84 -6.84 0 0 0 ]msf
148.44 730.338 mo
(ma)
[-6.65533 0 ]ysh
148.56 653.64 mo
(74000=B107400074000)
[-4.35028 -4.35022 -4.35028 -4.35022 -117.728 -5.59509 -4.69226 -4.35022 -124.567 -4.35022 -4.35028 -4.35022 
-4.35028 -119.888 -4.35022 -4.35028 -4.35022 -4.35028 0 ]ysh
156.84 740.04 mo
(mean)
[-6.6554 -4.0766 -4.11078 0 ]ysh
156.959 653.64 mo
(55000=B115500055000)
[-4.35028 -4.35022 -4.35028 -4.35022 -117.728 -5.59509 -4.69226 -4.35022 -124.567 -4.35022 -4.35028 -4.35022 
-4.35028 -119.888 -4.35022 -4.35028 -4.35022 -4.35028 0 ]ysh
%ADOBeginSubsetFont: Verdana-Italic Initial
ct_T42Dict begin
-0.453 -0.301 1.461 1.051
 256 array 0 1 255 {1 index exch /.notdef put} for  /Verdana-Italic
Type42DictBegin
[<00010000000c000c000c000c4f532f3272537b5c000000cc000000606376
74203d464c130000012c000001e66670676d9ab6568600000314000005eb
676c7966e2f39a7900002fd80001c57c68656164dd93d3dd000009000000
00366868656110210c240000093800000024686d7478e662285d0000095c
00000edc6c6f636133d0a44e00001838000007706d617870064d02920000
1fa8000000206e616d65d970b37700001fc800000cd5707265701af18969
00002ca00000033667646972000000000000000000000000000204110190
00050008059a0533002c0125059a0533004c03a0007802a70800020b0604
0305040b0204a10006ff4000205b00000010000000004d53202000010020
fffd061efe5900ca080b01ae2000019f00000000045d05d1000000200001
0614000a000005d1001f000005d1001f0000000000000000000000000000
045d001f00000000ffe100000000ffe100000000ffe10000fe64fff50000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000800000008000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000001d10229000000000000000000000000000001670000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000d100c600c100b400c100b400c300bc00b700b7
00ae009e00d100c700bd00b400bd00b4007000c800a800a3009e009100ac
00a2009d009600a6009e00910084010200c3000000af0090000000000000
0000000000000089000002e1007300000056006d00740081008c0093009f
00a60047000000860031003800790059005900aa00b800d100f600a0009c
00880078006f00800087008e009900a000b500d300e9011300fd01120133
013c021c0244029f011d022f028f037300a300b2009d00af025f022101a2
01fd0087009400a200b400760080008c03b000270090009b02b002ff0091
009b004c00940000403c543a393837363534333231302f2e2d2c2b2a2928
27262524232221201f1e1d1c1b1a191817161514131211100f0e0d0c0b0a
090807060504030201002c01b0184358b119072b1b212121592d2c01b018
4358b11a072b1b212121592d2c01b0184358b0032510f221b000121b2121
21592d2c01b0184358b11b072b1b212121592d2c01b0184358b11c072b1b
212121592d2c01b0184358b11d072b1b212121592d2c01b0184358b11e07
2b1b212121592d2c4eb00014b046234344b0032510b10046e6b00013b001
14b00010f221b001134db000122d2c01b018435845646a234569b0194364
6060b0462344231020b046f02fb000121b21212121592d2c01b10b0a4323
43650a2d2c00b10a0b4323430b2d2c00b0462370b101463e01b0462370b1
0246453ab10200080d2d2cb0122bb0022545b00225456ab0408b60b00225
23442121212d2cb0132bb0022545b00225456ab8ffc08c60b00225234421
21212d2cb000b0122b2121212d2cb000b0132b2121212d2c01b00643b007
43650a2d2c2069b04061b0008b20b12cc08a8cb8100062602b0c64236461
5c58b00361592d2cb100032545685458b0032545b0032545606820b00425
2344b0042523441bb00325204568208a2344b00325456860b00325234459
2d2cb00325204568208a2344b00325456860b0032523442d2cb009435887
21c01bb01243588745b0112bb0472344b0477ae41b038a45186920b04723
448a8a8720b0a05158b0112bb0472344b0477ae41b21b0477ae459595918
2d2c208a4523456860442d2c456a422d2c01182f2d2c21212d2c01b00225
45b002254564606ab00325456a6120b00425456a208a8b65b0042523448c
b00325234421212d2c01456823456961b00325456a6120b00425456a208a
8b65b0042523448cb00325234421212d2c018a8a45642345646164422d2c
01b0022543b04054b0022543b000545a58b003252045b040614459b00225
43b00054b0022543b040545a58b004252045b040604459212121212d2c01
4b525843b00225452361441b2121592d2c014b525843b00225452360441b
2121592d2c4b525845441b2121592d2c0120b003252349b04060b0206320
b000525823b002253823b002256538008a63381b212121212159012d2c4b
505845441b2121592d2c01b005251023208af500b0016023edec2d2c01b0
05251023208af500b0016123edec2d2c01b0062510f500edec2d2c462346
608a8a462320468a608a61b8ff8062232010238ab14b4b8a70456020b000
5058b00161b8ffba8b1bb0468c59b0106068013a2d2c2045b00325465258
3f1b2111592d2c2045b003254650583f1b2111592d2c00b00743b006430b
2d2c4b5258b00425b0042549b00425b00425496120b0005458212043b000
5558591bb04054582043b0005458591b2043b00054581bb00325b8ffc038
59595959212121212d2c4b52584365381b2121592d2c4b525843381b2121
592d2c21210c6423648bb84000622d2c21b08051580c6423648bb8200062
1bb200402f2b59b002602d2c21b0c051580c6423648bb81555621bb20080
2f2b59b002602d2c0c6423648bb84000626023212d2cb4000100000015b0
0826b00826b00826b008260f10161345683ab001162d2cb4000100000015
b00826b00826b00826b008260f1016134568653ab001162d2cb013435803
1b02592d2cb0134358021b03592d2cb00a2b2310203cb0172b2d2cb0282b
8a102320d023b0102bb00558c01b3c59201011b00012012d2c4b53234b51
5a5820458a60441b2121592d2c4b53234b515a58381b2121592d2c20b003
254523452361688a204568208a234460442d2c0120b0016020b040434823
2f003c012d2c2020b0016046b04023422fb0016020b064e000b003e0012d
2cb1020042b123018851b1400188535a58b910000020885458b202010243
604259b12401885158b920000040885458b202020243604259b124018854
58b2022002436042004b014b5258b2020802436042591bb9400000808854
58b202040243604259b94000008063b80100885458b202080243604259b9
4000010063b80200885458b2021002436042595959592d00000100000005
07aed0b6013a5f0f3cf5001b080000000000adbcbc6e00000000c891c4c8
fc60fd930bb0086800020009000200000000000000010000080bfe520000
0c26fc60fde80bb0000d000300000000000000000000000003b708000100
0000000002d0000002d00000032600ac03ac0131068c00bc0516003c089c
00bd05d000580226012d03a2008e03a2ffb005160127068c00fd02e9ffc5
03a2009a02e9007b03a2ff46051600850516009b051600220516003a0516
00300516005a05160086051600960516005b0516009e03a200d803a20017
068c0129068c0120068c0137045d010e080000c10576ffab057c00460596
008506200047050f0047049900460634008506030047035e000703a3ffb2
058b004b0474004606be004605fc0046064c008604d30046064c00850590
00460578003404ee00b005db009b057600df07ec0123057bffc204ec00d5
057b000203a2001403a200f903a2ffd0068c00ec0516ff360516023504ce
002704fc0038042b005704fc005504c4005802d0004404f9001505100038
0232003a02c1fef304b2003f0232003a07c900380510003804db005904fc
ffd904fc0055036a0038042b0011032700800510007a04ba00b2068c00c1
04bcffbb04ba00330434ffe1051400a403a201a50514fff1068c00e60576
ffab0576ffaa05960085050f004705fc0046064c008605db009b04ce0027
04ce002704ce002704ce002704ce002704ce0027042b005704c4005804c4
005804c4005804c400580232003902320039023200390232003905100038
04db005904db005904db005904db005904db00590510007a0510007a0510
007a0510007a0516012a045601180516008f0516000f05160044045d00e1
051600e604f60038080000ca080000ca07d001280516027c051601c8068c
012007eaff8d064c0050080000cf068c0102068c0129068c013705160062
0522ffdd0516008405d100e6068c00c505a900b9051600b5045d00c8045d
00c6068cfff607a3003304db000b045d0044032600a2068c00f7068c00c2
0516ffd0068c011e05cfffc5052800b10528005a068c00310576ffab0576
ffab064c0086088f008507d800580516009d0800009d03ac00d503ac00fa
022600d502260104068c00fd068c00d704ba003304ec00d502e4ff370516
000003a200c503a200690500004105020041051600af02e900f10226ff6f
03acff6f0c2600bd0576ffab050f00470576ffab050f0047050f0047035e
0007035e0007035e0007035e0007064c0086064c0086064c008605db009b
05db009b05db009b02320039051601ad0516016905160156051601c10516
0291051601af051600a8051601a0051601a6051601f90474ffe60232fffa
05780034042b0011057b00020434ffe103a201a50620003a04e5005804ec
00d504ba003304d8004604fcffd9068c0107068c014e04560120045600e4
045600d80800013c080001320800006b051600030634008504f90015035e
000705780034042b001105960085042b005705960085042b005704fc0055
051600fd02e900f10576ffab04ce00270576ffaa04ce002706200047052e
00550620003a050f004604c40058050f004704c40058047400460232003a
04740046025e003a0474004603ab003a05fc00460510003805fc00460510
0038064c008604db005905900046036a003805900046036a003805780034
042b001104ee000a0327fff904ee00b00327008005db009b0510007a05db
009b0510007a057b00020434ffe1057b00020434ffe104880046064c0086
0685007b04fc005504dd0058041a0033050b005903f80067065200550516
ff1904ff00ac045d0089094f004806f7000704e9003a05d8006202e400df
047500d9089c00c10296000f04d5009202d6008302d6008304d500b102d6
00700576ffab04ce002705960085042b005705960085042b0057050f0047
04c40058050f004704c40058050f004704c400580634008504f900150634
008504f900150634008504f9001506030047051000380603004705100038
035e00070232003a035e00070232003a035e00070232003a035e00070232
ffe603a3ffb202c1fef3058b004b04b2001b04b2003f047400460232ff1f
05fc00460510002705fc004605100038064c008604db0059064c008604db
005905900046036aff3505780034042b001104ee00b00327003a05db009b
0510007a05db009b0510007a05db009b050b007a05db009b0510007a07ec
0123068c00c104ec00d504ba00330267003d0576ffaa04ce002607eaff8d
07a30033064c005004db000b03a2019807ec0123068c00c107ec0123068c
00c107ec0123068c00c104ec00d504ba003302260034051600fd0516000f
05be00ac0800013c0800006b0800009b080000c202e9ffc5051600a80516
026a051601a90578ffad060200a706f600a7045100a8070c00a9060700a5
074300aa023200390576ffab057c004605cfffc5050f0047057b00020603
0047035e0007058b004b057cffaa06be004605fc00460531fff1064c0086
0603004604d300460561fff504ee00b004ec00d5057bffc206f700ea068c
fff6035e000704ec00d504fc0055041a00330510003802320039050b0081
04f6ffd804ba00ae03a900400510003804fe008b0232003904bc003f04bc
ffc7051cffd804ba00b20406003a04db005904feffd504100058050b0081
04b8ff500693008f0682004d02320039050b008104db0059050b00810682
004d050f0047065700ae04880046059b008505780034035e0007035e0007
03a3ffb208f2ff9408d30046068b00ae058b004b04ec0014060300460576
ffab057c0046057c00460488004605f7ff3a050f004707c9ffa704edffed
0601004606010046058b004b05e0ff9406be004606030047064c00860603
004604d300460596008504ee00b004ec00140685007b057bffc206170046
05b200e1083e0046085c0046064e00b0075d004605720046059c00020846
004605a6ffab04ce002704ea006a04c2003703c5003704f9ff4704c40058
0662ffc00432ffda051f0037051f003704bc003f04f7ffaa059200370519
003704db00590519003704fcffd9043f005703f8006704ba003306ba0054
04bcffbb0528003704d800a507020037071a003705200068065b00370491
00370460ffe806b6003804ccffc204c400580510003703c5003704600057
042b00110232003a0232003902c1fef30750ffaa075000370510003804bc
003f04ba0033051900370488004603c500370800009d0960004605190037
045600c50456009b045600c2045600dd045601c100000000000000000000
00000000000000000000000000000674008604db0059060d009b0547007a
0000fe080000fca90000fd210000fd68051601ad0516008f051601ad0516
01ad051601be051601be051601be051601be051602c0051602060516023a
0516023a0516023a05160237051602760576ffab04ce00270576ffab04ce
00270576ffab04ce00270576ffab04ce00270576ffab04ce00270576ffab
04ce00270576ffab04ce00270576ffab04ce00270576ffab04ce00270576
ffab04ce00270576ffab04ce00270576ffab04ce0027050f004704c40058
050f004704c40058050f004704c40058050f004704c40058050f004704c4
0058050f004704c40058050f004704c40058050f004704c40058035e0007
02320039035e00070232ffdf060d008604c400420488003a03c5000407c9
ffa70662ffc0058b004b04bc003f058b004b04bc003f0603004705190037
04ec00d504ba00ae04ec008804bafffa057bffc204bcffbb05b200e104d8
00a505b2004805100038060d008604c40042064c008604db005905100038
0510ffee0516009d03ac009c0475004d051600b5059600850596008507c9
003805fc00240951004607ec003b06ae001c058b004b04ee00b00800ffb5
042bff8104d30046068c00f5057c00460456005f00000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000064c008604db0059064c008604db0059064c
008604db0059064c008604db0059064c008604db0059064c008604db0059
064c008604db00590674008604db00590674008604db00590674008604db
00590674008604db00590674008604db005905db009b0510007a05db009b
0510007a060d009b0547007a060d009b0547007a060d009b0547007a060d
009b0547007a060d009b0547007a04ec00d504ba003304ec00d504ba0033
04ec00d504ba003304ec00d504ba003304fc003d0000fcb9051600b50853
000205abffe905ab027e05ab027e05abffe905ab027e05abffe904000025
063400850578ffad0578001d0596008505780034042b001104ee00b00327
006d0232003a02e900c406010046051f00370000fca80000fd0f09800086
0852005907de0081068100590516018e064c008604ef0059070700740583
003e070700740583003e064c008504fc005507ec0123068c00c1056c0035
0000fc6006100086052c00b208730123070000c103920123039201230221
010b022101020221008b0516008203a200d8044200c8022601140226012d
0603027d0519021701680000076c0079051600a10000001f001f001f001f
00530080011c01f902a2038c03ab03ee0432049b04d304f405100524054d
05b106020680070c077507ec087408ba09750a010a280a570aa30acf0b1c
0b810c480ca60d450dbf0e2c0e870ed50f6d0fd51020107610e3111a1191
11fb126c12db1387140e14b514ff157415bc162b16ac171a176317ac17de
18231867187d18a2193a19b21a1d1a9b1b0d1b791c161c8f1cce1d371dae
1ddb1e8d1f011f571fd6205b20b4214e21c8224822922315239523ec242e
24b324c7255c25cd25e6268a2732274927602779279227a327b427c527d7
27e828be29582969297d298e29a029b529cb2a262a782a892a9a2aab2abc
2ace2ae22af72b0e2b232b352b882bc62c772cef2dca2deb2e562ef62fac
305230af30d230f6315831db329e3337337833ce342534bc353a35c1361b
364f36ab36f4377d37cc387339553a053a713aa73acd3b2c3b963c283c61
3cdb3d513d853d9f3db63dcd3e613f183f2f3f463f763fae3fcb3fed4026
4069407b409440c3417f41c041ff428e4310438a439f43c143f444de44f5
450c4523453c4558456f4586459f45b645cd45e445fb461246294642466f
469c46ed47074755476c47ba47e74817484c487c48f9497b499249a349ba
49cb49ec4a794b424b594b6a4be04c634c884cc24d024d5b4de14e074e31
4e4c4ebd4ed34ee44efd4fcb508d50a650b750d250e35186519d51a551bf
51d052605326533c53df53e754725515552d5545555b558755df56275676
56bc56d256e65701571757325748575e57705786579757ad57c2583858df
58f8599259c459db59f65a085a215a335a495a5a5a915b185bca5c505cd9
5d795def5e3b5ee45f095f1d5f7c609f60ba60d46170619761dd6295631b
6343635d638463af6408641e642f6448645964736484649f64b664d064e5
64fb650f65256536654e6562662266dc66f2670d67a3684068ce693a699a
69da6a5e6ac46b3b6ba86bc06c3d6c4e6c646cdc6d366d886d996db06e3c
6ed56ef16f076f206f316f426fc36fdb6fec705d70f671117122713a714b
71657179722272cf72e572f7730f7320736b742a751b75317543755b7570
7585759b75b075c675db75f87612762b76407664767b7714778977b277db
780778317858788578a078df78f87914793179527975799779bb7a217a29
7a317a827a8a7a927a9a7aa27aaa7af57afd7b057b4c7b547ba67bae7c24
7c2c7c347c3c7ccf7d6d7d867d9f7db37dc77dde7df17e087eb57f147f86
800b80bc80e9817381c5824a825282fa8302838a83fd847284f7859c8640
864886638679868e86a586be8747875f87de87e687ee8807880f88c28966
89e58a018aac8b178b1f8b9d8ba58bdc8c648c6c8d5d8df48e508ee68f72
8fe68fee8ff68ffe905090589060906890e09192919a9204928392f1937c
93f3948d95019580962796b096b8974797e9982298ad98b5999d9a429aa8
9b469bcd9c4e9cd39d439d4b9da69dae9db69e029e0a9ed89ee09f509fc9
a03ba0caa13da1dba246a2bda354a3f1a403a4bea4cfa54ba553a55ba563
a56ba620a6bca759a76ea7f9a865a8b2a902a91ba9e8aa43aaa2ab22ab68
abeaac19ac19ac19ac19ac19ac19ac19acb4ad29adbaae52ae97aeadaeb6
aebfaeffaf3bafa4b009b055b0a1b11fb196b1e2b257b2b1b30eb396b420
b48bb49db4afb4c6b4d8b4ebb4fdb510b522b539b54bb55db56fb58ab5a4
b5b6b5c8b5dab5ecb5feb610b622b634b654b66eb680b694b6a9b6bbb6d1
b6e2b6fcb70eb728b73ab753b765b77bb78db7aeb7cab7e3b7f7b80bb81f
b896b902b951b99fba80bb70bc05bc93bd6bbe57bebfbf23bf2bbf33bfa0
c009c081c0f4c17dc209c265c26dc275c27dc2f7c364c3c8c41cc433c46a
c4bbc548c634c6dcc7a3c891c8a3c9bcca50cacbcb6bcc8ccd42cdf3ce20
ceedcfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0
cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0
cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0
cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0
cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0
cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0
cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0
cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0
cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0
cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0cfb0
cfc4cfd8cfeacffcd017d029d044d056d06cd07ed095d0a7d0cad0e6d0fd
d10ed126d13bd14dd162d178d18ed1a2d1b6d1c8d1dcd1f2d204d21bd22e
d246d25cd272d288d29ad2b0d2c2d2d6d2efd300d31ad32cd343d359d371
d382d43dd446d4bcd5afd5c5d5d9d5f3d60dd627d641d67ed721d7bdd88e
d934d940d94bd956d961d972d999d9abd9bcd9e1da05da7cdaf2dbb7dc72
dca5dd54ddf2de72deeedef9df04df0cdf14df1cdf24df9ddfa6e009e051
e0aee10ce12be14ae16ae18ae193e1ace1b4e1d6e1ede1f5e209e21de21d
e27de2be0001000003b700730007006b0005000200100041005500000221
01700003000100000046034e000100000000000000320000000100000000
00010007003200010000000000020006003900010000000000030031003f
0001000000000004000e00490001000000000005000c0058000100000000
0006000e00700001000000000007003b007e0001000000000009000e00b9
000100000000000d014c00c7000100000000000e002a0213000300010403
0002000e023d0003000104030004001e024b0003000104050002000e0269
0003000104050004001e02770003000104060002000c0295000300010406
0004001c02a10003000104070002000c02bd0003000104070004001c02c9
0003000104080002000c02e50003000104080004002202f1000300010409
0000006403130003000104090001000e024b0003000104090002000c0377
0003000104090003006203830003000104090004001c0397000300010409
0005001803b50003000104090006001c03e5000300010409000700760401
0003000104090009001c0477000300010409000d02980493000300010409
000e0054072b00030001040a0002000e023d00030001040a0004001e024b
00030001040b00020014077f00030001040b00040024079300030001040c
0002001007b700030001040c0004002007c700030001040e0002000807e7
00030001040e0004001807ef0003000104100002000e0807000300010410
0004001e08150003000104130002000e08330003000104130004001e0841
0003000104140002000c02bd0003000104140004001c02c9000300010415
0002000e085f0003000104150004001e086d0003000104160002000e088b
0003000104160004001e08990003000104190002000c08b7000300010419
0004001c08c300030001041b0002000e08df00030001041b0004001e08ed
00030001041d0002000c02bd00030001041d0004001c02c900030001041f
0002000c090b00030001041f0004001c09170003000104240002000e0933
0003000104240004001e094100030001042d0002000c095f00030001042d
0004001c096b00030001080a0002000e023d00030001080a0004001e024b
0003000108160002000e088b0003000108160004001e0899000300010c0a
0002000e023d000300010c0a0004001e024b000300010c0c0002001007b7
000300010c0c0004002007c7a92032303130204d6963726f736f66742043
6f72706f726174696f6e2e20416c6c205269676874732052657365727665
642e56657264616e614974616c69634d6963726f736f66743a5665726461
6e61204974616c69633a56657273696f6e20352e303320284d6963726f73
6f66742956657264616e612d4974616c696356657264616e612069732061
2074726164656d61726b206f6620746865204d6963726f736f6674206772
6f7570206f6620636f6d70616e6965732e4d617474686577204361727465
72596f75206d617920757365207468697320666f6e74206173207065726d
6974746564206279207468652045554c4120666f72207468652070726f64
75637420696e207768696368207468697320666f6e7420697320696e636c
7564656420746f20646973706c617920616e64207072696e7420636f6e74
656e742e20596f75206d6179206f6e6c792028692920656d626564207468
697320666f6e7420696e20636f6e74656e74206173207065726d69747465
642062792074686520656d62656464696e67207265737472696374696f6e
7320696e636c7564656420696e207468697320666f6e743b20616e642028
6969292074656d706f726172696c7920646f776e6c6f6164207468697320
666f6e7420746f2061207072696e746572206f72206f74686572206f7574
7075742064657669636520746f2068656c70207072696e7420636f6e7465
6e742e687474703a2f2f7777772e6d6963726f736f66742e636f6d2f7479
706f6772617068792f666f6e74732f004300750072007300690076006100
560065007200640061006e00610020004300750072007300690076006100
6b00750072007a00ed0076006100560065007200640061006e0061002000
6b00750072007a00ed00760061006b007500720073006900760056006500
7200640061006e00610020006b00750072007300690076004b0075007200
730069007600560065007200640061006e00610020004b00750072007300
69007603a003bb03ac03b303b903b100560065007200640061006e006100
3100300036002003a003bb03ac03b303b903b100a9002000320030003100
300020004d006900630072006f0073006f0066007400200043006f007200
70006f0072006100740069006f006e002e00200041006c006c0020005200
690067006800740073002000520065007300650072007600650064002e00
4900740061006c00690063004d006900630072006f0073006f0066007400
3a00560065007200640061006e00610020004900740061006c0069006300
3a00560065007200730069006f006e00200035002e003000330020002800
4d006900630072006f0073006f0066007400290056006500720064006100
6e0061002d004900740061006c0069006300560065007200640061006e00
6100200069007300200061002000740072006100640065006d0061007200
6b0020006f006600200074006800650020004d006900630072006f007300
6f00660074002000670072006f007500700020006f006600200063006f00
6d00700061006e006900650073002e004d00610074007400680065007700
200043006100720074006500720059006f00750020006d00610079002000
75007300650020007400680069007300200066006f006e00740020006100
730020007000650072006d00690074007400650064002000620079002000
7400680065002000450055004c004100200066006f007200200074006800
65002000700072006f006400750063007400200069006e00200077006800
69006300680020007400680069007300200066006f006e00740020006900
7300200069006e0063006c007500640065006400200074006f0020006400
6900730070006c0061007900200061006e00640020007000720069006e00
7400200063006f006e00740065006e0074002e00200059006f0075002000
6d006100790020006f006e006c0079002000280069002900200065006d00
62006500640020007400680069007300200066006f006e00740020006900
6e00200063006f006e00740065006e007400200061007300200070006500
72006d006900740074006500640020006200790020007400680065002000
65006d00620065006400640069006e006700200072006500730074007200
69006300740069006f006e007300200069006e0063006c00750064006500
6400200069006e0020007400680069007300200066006f006e0074003b00
200061006e006400200028006900690029002000740065006d0070006f00
72006100720069006c007900200064006f0077006e006c006f0061006400
20007400680069007300200066006f006e007400200074006f0020006100
20007000720069006e0074006500720020006f00720020006f0074006800
6500720020006f0075007400700075007400200064006500760069006300
6500200074006f002000680065006c00700020007000720069006e007400
200063006f006e00740065006e0074002e0068007400740070003a002f00
2f007700770077002e006d006900630072006f0073006f00660074002e00
63006f006d002f007400790070006f006700720061007000680079002f00
66006f006e00740073002f004b00750072007300690076006f0069007400
7500560065007200640061006e00610020004b0075007200730069007600
6f006900740075004900740061006c006900710075006500560065007200
640061006e00610020004900740061006c00690071007500650044015100
6c007400560065007200640061006e0061002000440151006c0074004300
6f0072007300690076006f00560065007200640061006e00610020004300
6f0072007300690076006f00430075007200730069006500660056006500
7200640061006e006100200043007500720073006900650066004b007500
72007300790077006100560065007200640061006e00610020004b007500
7200730079007700610049007400e1006c00690063006f00560065007200
640061006e006100200049007400e1006c00690063006f041a0443044004
410438043200560065007200640061006e00610020041a04430440044104
380432004b00750072007a00ed0076006100560065007200640061006e00
610020004b00750072007a00ed00760061013000740061006c0069006b00
560065007200640061006e00610020013000740061006c0069006b005000
6f016100650076006e006f00560065007200640061006e00610020005000
6f016100650076006e006f00450074007a0061006e006100560065007200
640061006e0061002000450074007a0061006e0061000000400954e8e719
1fe6e71a1fb8ffc04083c7171936e2eb261feceb2c1f20d940d9024fcc5f
cc02cbca121f6fca019fcaafca02c992081fc1b4241f9c9a371f9b9a321f
999a321f9a91321f9896301f9796481f9596481f96922d1f9491321f9391
2e1f9192461f1f922f92029291201f4f915f91029f910140e0e0e00210de
20de0200de10de30de40de50de70de0640bc090b36b8ffc04050bb0c1036
10ba0140b809103600b710b720b70360b570b502e3e5231fe4e5201f00ed
30ed60ed0350d50140d450d470d403f281151ff0b4321fefb4321f9fb401
dbda2c1fdadb211fdcdd2e1fddbe121fb8ffc0b3d30e1036b8ffc040ffd3
0a1036d2be081fd1be121f0fd01fd02fd003cfbe191fc0be191fbf7d4b1f
bdbe1f1fbe7f391f8e8c4b1f8d8b4b1f8c8b281f8a8b431f898b431f8b7f
471f9d851a1f88852e1f87852a1f8685641f8485501f8385501f40853c3d
36857f391fa082121f82804b1f817f4b1f4080414436807f281f7d7f4b1f
7f7e451f707e01407e41433629643b644b6459646064746406100f211f16
152a1f0706211f19182a1f0403211f13122a1f2c2d0f2a2b0e28290f2627
0e24250f22230e20210f1e1f0e1b1c1d0d18191a0d1516170d1213140d0f
10110c0c0d0e0c090a0b0c0607080c0304050c0001020c100f800f024006
80060240038003020f003f004f0040267f00040f002f003f006f007f00bf
00cf00ff00081b3b081f0f3a081f0339081f0038081f503301b0124b004b
5442b013014b004b5342b0332b4bb8080052b0322b4bb009505b58b10101
8e59b0332bb00288b8010054b00488b8020054b012435a5b58b80119b101
018e851bb0124358b10101b80180858d8d1bb10101b80180858d8d59592b
1db0644b5358b0701d59b0324b5358b0901d59002b2b2b2b73747373732b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2bb109322b4bb064
5242b1e9044523456861b0e92344b1eae94523456860b0ea234401b06420
45684473b07e4568b07e23442b732b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b732b2b2b2b2b2b2b2b732b2b2b7373732b2b7373
2b742b2b7374730073742b752b2b2b2b2b2b2b2b2b2b2b2b2b73742b7373
2b2b2b2b2b2b000000>
[16301 16305 16285 16177 16281 14625 16133 3993 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 13370 71 <00020055ffe1052a0614001300230085405a491a49226a047f0870117c1b
061214232321030200010186021314020213243913422602350245025602
750205022425243a100201000210026f027f0280029002060202250a091a
09021d8309bb24130017960f100220950616003fed2f3fed3f300110f6ed
5d11332f5d712b07105de42b872e2b7d10c40e103c083c0e3c3c31005d09
0123370e01232226353412373e013332161713032e01232206070e011514
1633323637052afe98bc1b7f9b5b9eb9645655e882599641709443814968
a33a3539697654af4a0614f9ec75573dc8bfa1011f6c6b7d262601e4fd80
232164574fde687a81543200>Verdana-Italic AddT42Char 
1 13622 72 <00020058ffe60482047c00090027006340320412100e1412531b601b7f0c
701207099840170117170a0698101021211d970a16460954097409032121
130d09171a038513b8ffc0400b090f371313291a830dbb2810f4ed11332f
2bed1139391112392f5d003fed332f3fed12392f71ed31305d013e013534
262322060701222435100021321615140607210e01151416333236373307
0e01070e0103c0050475818edc270106e8fef80184011ebeca1113fcc906
05ac9e6ee94f0b2932503e3e6002a81d28186b78b090fd3edad2013301b7
bdab1e82561d38188da15636cb121e0f0f10>Verdana-Italic AddT42Char 
1 13850 73 <00010044000003ec061e00180083405676050106080b0c86130e0d110d6f
1a014009500970090309090d000f100f200f2018300f30188f1807180f18
1a0f1a010f19391142260d350d4c0d5d0d750d050d191a193a0d00000497
06150115010b080e98110f0d002f3fed39393f5dfd322f30012f2b07105d
e42b335d11332f2f5d12392f5d5d1087c0c0fdc0c0c031015d01232e0123
22060f01210721032313233733373e013332161703c50a1d60267b7b1f09
015324feb3dabeda7f247f0829efbc3f662905650a127c822696fc3903c7
9625c4d80c08>Verdana-Italic AddT42Char 
1 0 0 <00020100000007000600000300070014b706020400060204002fcdddcd00
2fcdddcd3130211121112521112101000600fa800500fb000600fa008005
0000>Verdana-Italic AddT42Char 
Verdana-Italic /CharStrings get begin
/d 71 def
/e 72 def
/f 73 def
end
Verdana-Italic /Encoding get
dup 100 /d put
dup 101 /e put
dup 102 /f put
pop
end
%ADOEndSubsetFont
/XEHCAL+Verdana-Italic /Verdana-Italic findfont ct_VMDictPut
/XEHCAL+Verdana-Italic*1 
[100{/.notdef}rp /d /e /f 153{/.notdef}rp]
XEHCAL+Verdana-Italic nf
XEHCAL+Verdana-Italic*1 [0 -6.84 -6.84 0 0 0 ]msf
165.239 740.04 mo
(deff)
[-4.26135 -4.0766 -2.40771 0 ]ysh
XEHCAJ+Verdana*1 [0 -6.84 -6.84 0 0 0 ]msf
165.359 653.64 mo
(1.6=B121.61.6)
[-4.35028 -2.48975 -128.285 -5.59509 -4.69226 -4.35022 -124.567 -4.35022 -2.48975 -130.445 -4.35022 -2.48975 
0 ]ysh
%ADOBeginSubsetFont: FPFBAA+Verdana AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal FPFBAA+Verdana gcheck setglobal} if
1 382 303 <0002006affe1047306140019002800f24029031c0520171526153b0a3a0e
3a1c3e214c0a490e4a1c4f2153176b0e7b0e7a207b211136264626021db8
ffe0b4090902551db8ffe0401d121c371d180a11371d171d0c050f133e10
01263f030a1111001d0c0f1ab8fff8b4090902551ab8fff840100c0c0255
1a1b00140f2a400c0c025500b8fffcb40b0b025500b8ffe0404110100255
00180c0c025500902a0f2a1f2a3f2a6f2a040f0f230409090255230c0c0c
0255231b06160b0b025506180909025506080c0c025506040d0d02550685
2910f62b2b2b2bed2b2b332f5d10e42b2b2b2b113910ed2b2b1139391133
2f003fed3ffd323f33332f2b2b2b5d31305d011000232200113436373636
372626273521152115161617161607342627060607060615141633323604
73feebeef1feeb564045b45c4cb466032afdcf44de5d9676c26e6e429142
3f55aa9c99a60227fef0feca012f01068dc5404852113f8748b39e0a2e9c
5488fba487e45608303532ae7fc9d0d3>FPFBAA+Verdana AddT42Char 
FPFBAA+Verdana /CharStrings get begin
/g303 303 def
end
FPFBAA+Verdana /Encoding get
dup 34 /g303 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XEHCAK+Verdana*1 
[32{/.notdef}rp /g302 /g451 /g303 221{/.notdef}rp]
XEHCAK+Verdana nf
XEHCAK+Verdana*1 [0 -6.84 -6.84 0 0 0 ]msf
173.639 700.32 mo
(")sh
XEHCAJ+Verdana*1 [0 -6.84 -6.84 0 0 0 ]msf
173.758 653.64 mo
(5000250050002500)
[-4.35028 -4.35022 -4.35028 -122.076 -4.35028 -4.35022 -4.35028 -126.156 -4.35022 -4.35028 -4.35022 -124.236 
-4.35022 -4.35028 -4.35022 0 ]ysh
190.438 740.04 mo
(n.ef)
[-4.32971 -2.48975 -4.0766 0 ]ysh
gsave
184.2 740.04 mo
191.76 740.04 li
191.76 724.2 li
184.2 724.2 li
cp
clp
XEHCAJ+Verdana*1 [0 -6.84 -6.84 0 0 0 ]msf
190.44 726.744 mo
(f)sh
grestore
XEHCAJ+Verdana*1 [0 -6.84 -6.84 0 0 0 ]msf
190.56 653.64 mo
(=)sh
gsave
184.2 653.64 mo
191.88 653.64 li
191.88 567.84 li
184.2 567.84 li
cp
clp
XEHCAJ+Verdana*1 [0 -6.84 -6.84 0 0 0 ]msf
190.56 648.042 mo
(\()sh
grestore
%ADOBeginSubsetFont: JXJAAA+Verdana AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal JXJAAA+Verdana gcheck setglobal} if
1 498 13 <000100a70276047106140011009040094f1301114009103708b8ffc04058
0910375b025b05540b540e6b026b05640b640e7b027b05730b730e0c0106
0f0a0b0e08110502060c064f04500402040a0f0c01040c010f131f130200
110d4010011008070c4f090109100e020304050b060d2809700c010c2f5d
33ed1739322f5d1239392f5d1239395d003f335d332f5d331217392f332f
3331305d012b2b5d01072513231305272d013705033303251705047140fe
96068105fe9741017dfe8341016a068107016b40fe8403776ed5fe980168
d66ecfcf6ed50167fe99d46ecd00>JXJAAA+Verdana AddT42Char 
JXJAAA+Verdana /CharStrings get begin
/asterisk 13 def
end
JXJAAA+Verdana /Encoding get
dup 42 /asterisk put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XEHCAJ+Verdana*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /asterisk 2{/.notdef}rp /hyphen 
/period /slash /zero /one /two /three /four /five 
/six /seven 5{/.notdef}rp /equal /.notdef /question 2{/.notdef}rp /B 
/C /D /E 3{/.notdef}rp /I 3{/.notdef}rp /M /N 
/O 2{/.notdef}rp /R /S 2{/.notdef}rp /V 10{/.notdef}rp /a 
2{/.notdef}rp /d /e /f /g /.notdef /i 3{/.notdef}rp 
/m /n 4{/.notdef}rp /s /t 5{/.notdef}rp /z 133{/.notdef}rp]
XEHCAJ+Verdana nf
XEHCAJ+Verdana*1 [0 -6.84 -6.84 0 0 0 ]msf
190.56 644.936 mo
(B10*)
[-4.69232 -4.35022 -4.35028 0 ]ysh
gsave
184.2 653.64 mo
191.88 653.64 li
191.88 567.84 li
184.2 567.84 li
cp
clp
XEHCAJ+Verdana*1 [0 -6.84 -6.84 0 0 0 ]msf
190.56 627.202 mo
(\()sh
grestore
%ADOBeginSubsetFont: JXJAAA+Verdana AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal JXJAAA+Verdana gcheck setglobal} if
1 722 14 <000100d2001b05ba04fd000b0039402303ac01045408ac0a0f070107400d
01300d400d0200ab0a800101012a05ab07400401042f5d3ce4fd5d3ce45d
5d002f5d3ce4fd3ce4313001211123112135211133112105bafddfa6fddf
0221a60221023cfddf0221a00221fddf>JXJAAA+Verdana AddT42Char 
1 3618 27 <0003007affde049c05f3001900280037014eb90026fff4b40d0f025525b8
fff4b40d0f025524b8fff4b40d0f025523b8fff4b40d0f025522b8fff440
550d0f02552d2b3415332234273433441541224427453350155b195a1b5a
1f54225f2b592c5f31543354376008620e6212621960236027760e76127b
2c86121d0602a926a62f0226160a2f04031d4710023548030a1ab8fff8b4
0b0b42551ab8fffc40100c0d42551a200013011313002f0a0d29b8fff8b4
0b0b425529b8fffc40270c0c425529210016262000160c0c0255009d390f
391f390220080b0b425520040c0d425520210db8fff440170f0f02550d0d
32080b0b425532040c0c4255322106973810f6ed2b2b332f2bed2b2b5d10
e42b11393910ed2b2b11393911332f71ed2b2b003fed3fed1217395d4354
58401e592c892c02292c3203352f292f36234523562364239926061a2023
03261d111217395d111217395d5931305d2b2b2b2b2b0114002322243534
363735262635342433320415140607151616033426232206151416171616
173636133426272626270606151416333236049cfed3e4f2fee190837873
0114d5df010a7e7a8c94eda5807ea15152258b42634c1f51762f705d5a6d
ba8f92af019fc1ff00fac37cc93b06409872a8e0d6a565c337063cb0024f
6b7f7866486929123a13428efd735c6f3816262231a86a87b096>JXJAAA+Verdana AddT42Char 
JXJAAA+Verdana /CharStrings get begin
/plus 14 def
/eight 27 def
end
JXJAAA+Verdana /Encoding get
dup 43 /plus put
dup 56 /eight put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XEHCAJ+Verdana*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /asterisk /plus /.notdef 
/hyphen /period /slash /zero /one /two /three /four 
/five /six /seven /eight 4{/.notdef}rp /equal /.notdef /question 
2{/.notdef}rp /B /C /D /E 3{/.notdef}rp /I 3{/.notdef}rp 
/M /N /O 2{/.notdef}rp /R /S 2{/.notdef}rp /V 
10{/.notdef}rp /a 2{/.notdef}rp /d /e /f /g /.notdef 
/i 3{/.notdef}rp /m /n 4{/.notdef}rp /s /t 5{/.notdef}rp 
/z 133{/.notdef}rp]
XEHCAJ+Verdana nf
XEHCAJ+Verdana*1 [0 -6.84 -6.84 0 0 0 ]msf
190.56 624.096 mo
(B5+B8)
[-4.69232 -4.35022 -5.59509 -4.69226 0 ]ysh
gsave
184.2 653.64 mo
191.88 653.64 li
191.88 567.84 li
184.2 567.84 li
cp
clp
XEHCAJ+Verdana*1 [0 -6.84 -6.84 0 0 0 ]msf
190.56 600.423 mo
(\))sh
grestore
XEHCAJ+Verdana*1 [0 -6.84 -6.84 0 0 0 ]msf
190.56 597.317 mo
(/B13)
[-3.10535 -4.69226 -4.35022 0 ]ysh
gsave
184.2 653.64 mo
191.88 653.64 li
191.88 567.84 li
184.2 567.84 li
cp
clp
XEHCAJ+Verdana*1 [0 -6.84 -6.84 0 0 0 ]msf
190.56 580.825 mo
(\))sh
grestore
%ADOBeginSubsetFont: JXJAAA+Verdana AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal JXJAAA+Verdana gcheck setglobal} if
1 8432 65 <000100ba02aa05d205d10006004740343b0133034b0145035f0150036f01
60037f0170030a69027b02020102050f031f033f035f036f030503030503
0000004f000200042f335d2f003f332f5d12393931305d015d0123090123
013305d2c6fe39fe3ac5024d7e02ac0273fd8b032700>JXJAAA+Verdana AddT42Char 
JXJAAA+Verdana /CharStrings get begin
/asciicircum 65 def
end
JXJAAA+Verdana /Encoding get
dup 94 /asciicircum put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XEHCAJ+Verdana*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /asterisk /plus /.notdef 
/hyphen /period /slash /zero /one /two /three /four 
/five /six /seven /eight 4{/.notdef}rp /equal /.notdef /question 
2{/.notdef}rp /B /C /D /E 3{/.notdef}rp /I 3{/.notdef}rp 
/M /N /O 2{/.notdef}rp /R /S 2{/.notdef}rp /V 
7{/.notdef}rp /asciicircum 2{/.notdef}rp /a 2{/.notdef}rp /d /e /f 
/g /.notdef /i 3{/.notdef}rp /m /n 4{/.notdef}rp /s 
/t 5{/.notdef}rp /z 133{/.notdef}rp]
XEHCAJ+Verdana nf
XEHCAJ+Verdana*1 [0 -6.84 -6.84 0 0 0 ]msf
190.56 577.719 mo
(^2=)
[-5.59509 -53.603 0 ]ysh
gsave
184.2 518.52 mo
191.88 518.52 li
191.88 432.24 li
184.2 432.24 li
cp
clp
XEHCAJ+Verdana*1 [0 -6.84 -6.84 0 0 0 ]msf
190.56 512.922 mo
(\()sh
grestore
XEHCAJ+Verdana*1 [0 -6.84 -6.84 0 0 0 ]msf
190.56 509.816 mo
(C10*)
[-4.77429 -4.35028 -4.35025 0 ]ysh
gsave
184.2 518.52 mo
191.88 518.52 li
191.88 432.24 li
184.2 432.24 li
cp
clp
XEHCAJ+Verdana*1 [0 -6.84 -6.84 0 0 0 ]msf
190.56 491.995 mo
(\()sh
grestore
XEHCAJ+Verdana*1 [0 -6.84 -6.84 0 0 0 ]msf
190.56 488.889 mo
(C5+C8)
[-4.77429 -4.35025 -5.59509 -4.77429 0 ]ysh
gsave
184.2 518.52 mo
191.88 518.52 li
191.88 432.24 li
184.2 432.24 li
cp
clp
XEHCAJ+Verdana*1 [0 -6.84 -6.84 0 0 0 ]msf
190.56 465.042 mo
(\))sh
grestore
XEHCAJ+Verdana*1 [0 -6.84 -6.84 0 0 0 ]msf
190.56 461.936 mo
(/C13)
[-3.10532 -4.77432 -4.35025 0 ]ysh
gsave
184.2 518.52 mo
191.88 518.52 li
191.88 432.24 li
184.2 432.24 li
cp
clp
XEHCAJ+Verdana*1 [0 -6.84 -6.84 0 0 0 ]msf
190.56 445.357 mo
(\))sh
grestore
XEHCAJ+Verdana*1 [0 -6.84 -6.84 0 0 0 ]msf
190.56 442.251 mo
(^2=)
[-5.59506 -57.3356 0 ]ysh
gsave
184.2 379.32 mo
191.88 379.32 li
191.88 291.12 li
184.2 291.12 li
cp
clp
XEHCAJ+Verdana*1 [0 -6.84 -6.84 0 0 0 ]msf
190.56 373.722 mo
(\()sh
grestore
XEHCAJ+Verdana*1 [0 -6.84 -6.84 0 0 0 ]msf
190.56 370.616 mo
(D10*)
[-5.27362 -4.35025 -4.35025 0 ]ysh
gsave
184.2 379.32 mo
191.88 379.32 li
191.88 291.12 li
184.2 291.12 li
cp
clp
XEHCAJ+Verdana*1 [0 -6.84 -6.84 0 0 0 ]msf
190.56 352.301 mo
(\()sh
grestore
XEHCAJ+Verdana*1 [0 -6.84 -6.84 0 0 0 ]msf
190.56 349.195 mo
(D5+D8)
[-5.27362 -4.35025 -5.59506 -5.27362 0 ]ysh
gsave
184.2 379.32 mo
191.88 379.32 li
191.88 291.12 li
184.2 291.12 li
cp
clp
XEHCAJ+Verdana*1 [0 -6.84 -6.84 0 0 0 ]msf
190.56 324.359 mo
(\))sh
grestore
XEHCAJ+Verdana*1 [0 -6.84 -6.84 0 0 0 ]msf
190.56 321.254 mo
(/D13)
[-3.10532 -5.27362 -4.35025 0 ]ysh
gsave
184.2 379.32 mo
191.88 379.32 li
191.88 291.12 li
184.2 291.12 li
cp
clp
XEHCAJ+Verdana*1 [0 -6.84 -6.84 0 0 0 ]msf
190.56 304.18 mo
(\))sh
grestore
XEHCAJ+Verdana*1 [0 -6.84 -6.84 0 0 0 ]msf
190.56 301.074 mo
(^2=)
[-5.59506 -53.4382 0 ]ysh
gsave
184.2 242.04 mo
191.88 242.04 li
191.88 157.68 li
184.2 157.68 li
cp
clp
XEHCAJ+Verdana*1 [0 -6.84 -6.84 0 0 0 ]msf
190.56 236.442 mo
(\()sh
grestore
XEHCAJ+Verdana*1 [0 -6.84 -6.84 0 0 0 ]msf
190.56 233.336 mo
(E10*)
[-4.32288 -4.35028 -4.35028 0 ]ysh
gsave
184.2 242.04 mo
191.88 242.04 li
191.88 157.68 li
184.2 157.68 li
cp
clp
XEHCAJ+Verdana*1 [0 -6.84 -6.84 0 0 0 ]msf
190.56 215.966 mo
(\()sh
grestore
XEHCAJ+Verdana*1 [0 -6.84 -6.84 0 0 0 ]msf
190.56 212.86 mo
(E5+E8)
[-4.32288 -4.35028 -5.59509 -4.32288 0 ]ysh
gsave
184.2 242.04 mo
191.88 242.04 li
191.88 157.68 li
184.2 157.68 li
cp
clp
XEHCAJ+Verdana*1 [0 -6.84 -6.84 0 0 0 ]msf
190.56 189.915 mo
(\))sh
grestore
XEHCAJ+Verdana*1 [0 -6.84 -6.84 0 0 0 ]msf
190.56 186.809 mo
(/E13)
[-3.10535 -4.32288 -4.35028 0 ]ysh
gsave
184.2 242.04 mo
191.88 242.04 li
191.88 157.68 li
184.2 157.68 li
cp
clp
XEHCAJ+Verdana*1 [0 -6.84 -6.84 0 0 0 ]msf
190.56 170.681 mo
(\))sh
grestore
%ADOBeginSubsetFont: JXJAAA+Verdana AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal JXJAAA+Verdana gcheck setglobal} if
1 62 5 <000200a803d10304061400030007002640150206060307010f0940090203
2c0040000100042c072fed335d2fed5d003f3c332f3c3130010323032303
230303042b842ba82b842b0614fdbd0243fdbd024300>JXJAAA+Verdana AddT42Char 
1 828 15 <00010093fe8e023f011d0003003540261a012a012b023500390245004802
5500590264007400c5030c0202035604000004021a0202022f5d332f0010
f4322f3130015d09012313023ffee692ae011dfd71028f00>JXJAAA+Verdana AddT42Char 
1 5704 41 <000100c80000047f05d1000900a9b2053502b8ffc040150f0f0255020207
01350803070800034f0b02030300b8ffd440260d0d065500640b0f0b0102
05080b0b425505040c0d425505010c0c06550514070e1010025507b8fffc
b40b0b025507b8ffda400b0f0f025507080909025507b8ffeeb40c0c0255
07b8ffeab40d0d025507b8ffe0b40d0d065507b8ffecb60c0c0655076c0a
10f62b2b2b2b2b2b2b2bfd2b2b2b325d10f42b322f5d003f3fed12392f2b
ed313001211121152111231121047ffd0f0287fd79c603b70521fe5cb0fd
3305d100>JXJAAA+Verdana AddT42Char 
JXJAAA+Verdana /CharStrings get begin
/quotedbl 5 def
/comma 15 def
/F 41 def
end
JXJAAA+Verdana /Encoding get
dup 34 /quotedbl put
dup 44 /comma put
dup 70 /F put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XEHCAJ+Verdana*1 
[32{/.notdef}rp /space /.notdef /quotedbl 5{/.notdef}rp /parenleft /parenright /asterisk 
/plus /comma /hyphen /period /slash /zero /one /two 
/three /four /five /six /seven /eight 4{/.notdef}rp /equal 
/.notdef /question 2{/.notdef}rp /B /C /D /E /F 
2{/.notdef}rp /I 3{/.notdef}rp /M /N /O 2{/.notdef}rp /R 
/S 2{/.notdef}rp /V 7{/.notdef}rp /asciicircum 2{/.notdef}rp /a 2{/.notdef}rp 
/d /e /f /g /.notdef /i 3{/.notdef}rp /m 
/n 4{/.notdef}rp /s /t 5{/.notdef}rp /z 133{/.notdef}rp]
XEHCAJ+Verdana nf
XEHCAJ+Verdana*1 [0 -6.84 -6.84 0 0 0 ]msf
190.56 167.575 mo
(^2)
[-5.59509 0 ]ysh
201 740.04 mo
(n)sh
201.12 653.64 mo
(=IF\(OR\(B12="",B12=1\),"",B15*B12\)=IF\(OR\(C12="",C12=1\),"",C15*C12\)=IF\(OR\(D12="",D12=1\),"",D15*D12\)=IF\(OR\(E12="",E12=1\),"",E15*E12)
[-5.59509 -2.87964 -3.93298 -3.10535 -5.38306 -4.75385 -3.10535 -4.69226 -4.35028 -4.35022 -5.59509 -3.13953 
-3.13959 -2.48975 -4.69226 -4.35028 -4.35022 -5.59509 -4.35022 -3.10535 -2.48975 -3.13959 -3.13953 -2.48975 
-4.69226 -4.35028 -4.35022 -4.35028 -4.69226 -4.35022 -4.35028 -9.79486 -5.59503 -2.8797 -3.93298 -3.10532 
-5.38309 -4.75385 -3.10535 -4.77429 -4.35025 -4.35025 -5.59509 -3.13953 -3.13959 -2.48975 -4.77429 -4.35025 
-4.35025 -5.59509 -4.35022 -3.10535 -2.48975 -3.13956 -3.13956 -2.48975 -4.77429 -4.35028 -4.35022 -4.35028 
-4.77429 -4.35025 -4.35025 -13.5274 -5.59509 -2.87967 -3.93298 -3.10532 -5.38309 -4.75385 -3.10535 -5.27359 
-4.35028 -4.35025 -5.59506 -3.13956 -3.13956 -2.48975 -5.27362 -4.35025 -4.35025 -5.59506 -4.35025 -3.10535 
-2.48975 -3.13956 -3.13956 -2.48975 -5.27365 -4.35022 -4.35022 -4.35028 -5.27362 -4.35022 -4.35022 -9.63074 
-5.59509 -2.87964 -3.93298 -3.10535 -5.38306 -4.75391 -3.10535 -4.32288 -4.35022 -4.35028 -5.59503 -3.13959 
-3.13959 -2.48975 -4.32288 -4.35022 -4.35028 -5.59509 -4.35028 -3.10529 -2.48975 -3.13959 -3.13953 -2.48975 
-4.32288 -4.35034 -4.35022 -4.35022 -4.32288 -4.35034 0 ]ysh
201.12 118.172 mo
(\))sh
%ADOBeginSubsetFont: Verdana-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Verdana-Bold gcheck setglobal} if
1 7272 40 <000100be000004f305d1000b0047401a099130064006600670068006b006
06060601059102030a910108b8ffc0400f10153708040800000d06097f01
b50c10f6fd3211332f33332f2b002fed3fed12392f5ded31302121112111
2111211121112104f3fbcb0435fd490285fd7b02b705d1fee0fefffee0fe
9000>Verdana-Bold AddT42Char 
1 14270 80 <000100aa000007d604820028005e40410416031c151c2818a716a61bb716
b61b0826951a1011171f02040e099514100f0f0e1e841faa17018402110d
840eaa000210020202022a29002a302a502a702a045d1112392f5df4fd32
10ed39f4ed002f3f3fed1217393fed31305d011121113426272e01232206
0711211121153e01333216173e01333216151121113426272e0123220604
f4fe960812124942356428fe9801685daa676faa306ccc62b6bdfe960712
114a432d56031cfce4023152732424212b18fce404637c495263605b68da
cdfd25023153722424211f00>Verdana-Bold AddT42Char 
2 0 91 <0001001a000005400463000b00ed400f2f0220085602590804024a091037
08b8ffb640260910371c05130b3a05350b4e01430343074e095901560358
0556075909570b0e0b2009103705b8ffe0402c091037030201020b000b0a
05060508070804094b0901093011173709880a030a010205060b0807004b
070107b8ffd040111117370788060601080a000204060f0400b8ffdfb309
10370ab8ffdf4021091037062109103704210910370a0605060a0b040400
000d2f0d010004100402042f5d5d11332f1217392f2f2b2b2b2b002f3f17
393130018710fd2b7187c0c010c0c0c08710fd2b718708c008c01008c008
c005c0012b2b5d002b2b5d29010b01210901211b0121010540fe5cf0f6fe
6401bbfe4c01a4eced019dfe4b0150feb002310232feb6014afdd700>Verdana-Bold AddT42Char 
Verdana-Bold /CharStrings get begin
/E 40 def
/m 80 def
/x 91 def
end
Verdana-Bold /Encoding get
dup 69 /E put
dup 109 /m put
dup 120 /x put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XEHCAI+Verdana-Bold*1 
[40{/.notdef}rp /parenleft /parenright 27{/.notdef}rp /E 27{/.notdef}rp /a /b 
10{/.notdef}rp /m 10{/.notdef}rp /x 135{/.notdef}rp]
XEHCAI+Verdana-Bold nf
XEHCAI+Verdana-Bold*1 [0 -6.84 -6.84 0 0 0 ]msf
60.9598 268.32 mo
(Exam)
[-4.67169 -4.57605 -4.56909 0 ]ysh
gsave
54.6 268.32 mo
62.28 268.32 li
62.28 221.04 li
54.6 221.04 li
cp
clp
%ADOBeginSubsetFont: Verdana-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Verdana-Bold gcheck setglobal} if
1 14786 83 <000200aafe64053e048200130020003f402b4402440f4420520f5213650f
641379087f1c09179611100c0f1e9706160b1b148300bc220e1b09840cb9
2110f6fd323210f6ed003f3fed3f3fed31305d0114060706062322262711
21112115363633321201342623220607111616333236053e554548b66860
8646fe98016853ad71d2e9fe8d7079336c312452288f8c02418be44a4e50
2925fe2c05ff754252feccfeeca4941f1dfdcb0e08a7>Verdana-Bold AddT42Char 
Verdana-Bold /CharStrings get begin
/p 83 def
end
Verdana-Bold /Encoding get
dup 112 /p put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XEHCAI+Verdana-Bold*1 
[40{/.notdef}rp /parenleft /parenright 27{/.notdef}rp /E 27{/.notdef}rp /a /b 
10{/.notdef}rp /m 2{/.notdef}rp /p 7{/.notdef}rp /x 135{/.notdef}rp]
XEHCAI+Verdana-Bold nf
XEHCAI+Verdana-Bold*1 [0 -6.84 -6.84 0 0 0 ]msf
60.96 247.266 mo
(p)sh
grestore
%ADOBeginSubsetFont: Verdana-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Verdana-Bold gcheck setglobal} if

1 0 3 <> Verdana-Bold AddT42Char 
1 2594 17 <000100b70000022d01890003001b401102d90100d000014f015f016f017f
0105012f5ded002fed313029011121022dfe8a0176018900>Verdana-Bold AddT42Char 
1 3276 22 <0001008cffe1052305f00040009640700e7c0d10372f7c0d10370b0b0332
1b0b12322b0b2e10222e23323a0b3a0f342e3432343d490b4632453d5101
590b5119523c64016a0b6419613876017a0b74381b3e3d1e9c601f011f30
302c991f0934070d0d11990919268a3a4f1f5f1f021f311789311f3a3d04
0c030342000c010c2f5d11332f121739ed2f2f5d2fed003fed332f3f1239
ed332f2f5ded393931305d012b2b011e01151406070e012322242711331e
01333236373e01353426272e012b0111333236373e01353426272e012322
060723113624333216171e0115140607151e0104b8313a535654e3a2b9fe
f7532756ef633a882f252c3c31318a3b52554e782a2c2c2e23276a265edc
672552011a918dd44552509a7e337202ba2a705d69b6413f433a24014734
4c132019474341470f1003010a0a12133f3d2d3710120c413d0143213d31
29318c5e7cc31b0e072a>Verdana-Bold AddT42Char 
1 3616 23 <00020054fffc055f05d1000a000d0072404d290701060d160d2f074a0746
0d5907540d6c07660d7a07750d0b0c500d600d700d030d0606070609010d
9b4f055f057f05030505030706034f0a5f0a020a07090c048b0a01010f1f
062f0602062f5d11332f33ed3939322f5d002f3f12392f5ded3939323130
018710dd5d04c0015d5d0123112111211101211133211101055fcbfe91fd
2f02b90187cbfdc6fe4f0157fea5015b011a0360fc96021afde6>Verdana-Bold AddT42Char 
1 12990 72 <00020058ffe204fc04860015001c006e405324022b0a33023c0a43024d05
4d0a430e4c105a055b0a551b69066b096014601774027909740e74141401
f11c1c0c19a712100008100853086308730805080804980c160909168400
bc1e2f1e011c01840fbb1d10f6fd325d10f4ed332f003fed332f5d3fed12
392fed31305d01211e013332363733110e0123200011100021200011252e
012322060704fcfcc808b9b472d63e287ad883feaefe9801550129011201
14fe9a036a7068860801ef848c522ffedf312c0130011901160145feebfe
fc5571726c77>Verdana-Bold AddT42Char 
1 14214 79 <000100aa0000021206140003001d40120200010084000110010201500560
057005035d2f5ded002f3f3130290111210212fe980168061400>Verdana-Bold AddT42Char 
Verdana-Bold /CharStrings get begin
/space 3 def
/period 17 def
/three 22 def
/four 23 def
/e 72 def
/l 79 def
end
Verdana-Bold /Encoding get
dup 32 /space put
dup 46 /period put
dup 51 /three put
dup 52 /four put
dup 101 /e put
dup 108 /l put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XEHCAI+Verdana-Bold*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period 4{/.notdef}rp 
/three /four 16{/.notdef}rp /E 27{/.notdef}rp /a /b 2{/.notdef}rp 
/e 6{/.notdef}rp /l /m 2{/.notdef}rp /p 7{/.notdef}rp /x 
135{/.notdef}rp]
XEHCAI+Verdana-Bold nf
XEHCAI+Verdana-Bold*1 [0 -6.84 -6.84 0 0 0 ]msf
60.96 242.483 mo
(le 4.3)
[-2.33923 -4.54181 -2.33923 -4.86322 -2.46918 0 ]ysh
60.96 541.2 mo
(Exam)
[-4.67169 -4.57605 -4.56909 0 ]ysh
gsave
54.6 541.2 mo
62.28 541.2 li
62.28 493.92 li
54.6 493.92 li
cp
clp
XEHCAI+Verdana-Bold*1 [0 -6.84 -6.84 0 0 0 ]msf
60.96 520.146 mo
(p)sh
grestore
%ADOBeginSubsetFont: Verdana-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Verdana-Bold gcheck setglobal} if
1 3038 21 <000100b90000054a05ee001d008b40300e7c0d103702111411210d251134
0d341147115611621574150a00020f0f0b991307021c9a016000601c7000
701c041cb8ffc0401609103700001c02088980160116168c1f1010000201
022f5d332f10f62f5ded1239332f2b5d002ffd323fed332f435458401b0f
020b181f021b182f022b183b184a185b055b186b056b187f170d5d593130
5d012b2901353624373e013534262322060723113624332004151406070e
010721054afb6f86010d517966837b5ccb57204701158b011801268d915b
b827029df661da4f75ae55666f4c3b014b1f3eebd78dfe87548d1c00>Verdana-Bold AddT42Char 
Verdana-Bold /CharStrings get begin
/two 21 def
end
Verdana-Bold /Encoding get
dup 50 /two put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XEHCAI+Verdana-Bold*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period 3{/.notdef}rp 
/two /three /four 16{/.notdef}rp /E 27{/.notdef}rp /a /b 
2{/.notdef}rp /e 6{/.notdef}rp /l /m 2{/.notdef}rp /p 7{/.notdef}rp 
/x 135{/.notdef}rp]
XEHCAI+Verdana-Bold nf
XEHCAI+Verdana-Bold*1 [0 -6.84 -6.84 0 0 0 ]msf
60.96 515.363 mo
(le 4.2)
[-2.33923 -4.54175 -2.33926 -4.86322 -2.46918 0 ]ysh
54.6 655.08 mo
202.92 655.08 li
202.92 654.96 li
54.6 654.96 li
cp
f
62.76 519.96 mo
202.92 519.96 li
202.92 519.84 li
62.76 519.84 li
cp
f
54.6 380.76 mo
202.92 380.76 li
202.92 380.64 li
54.6 380.64 li
cp
f
62.76 243.48 mo
202.92 243.48 li
202.92 243.36 li
62.76 243.36 li
cp
f
54.6 109.32 mo
202.92 109.32 li
202.92 109.2 li
54.6 109.2 li
cp
f
62.64 741.12 mo
62.76 741.12 li
62.76 109.2 li
62.64 109.2 li
cp
f
71.04 741.12 mo
71.16 741.12 li
71.16 109.2 li
71.04 109.2 li
cp
f
87.84 741.12 mo
87.96 741.12 li
87.96 109.2 li
87.84 109.2 li
cp
f
96.24 741.12 mo
96.36 741.12 li
96.36 109.2 li
96.24 109.2 li
cp
f
106.44 741.12 mo
106.56 741.12 li
106.56 109.2 li
106.44 109.2 li
cp
f
114.84 741.12 mo
114.96 741.12 li
114.96 109.2 li
114.84 109.2 li
cp
f
123.24 741.12 mo
123.36 741.12 li
123.36 109.2 li
123.24 109.2 li
cp
f
133.44 741.12 mo
133.56 741.12 li
133.56 109.2 li
133.44 109.2 li
cp
f
141.84 741.12 mo
141.96 741.12 li
141.96 109.2 li
141.84 109.2 li
cp
f
150.24 741.12 mo
150.36 741.12 li
150.36 109.2 li
150.24 109.2 li
cp
f
158.64 741.12 mo
158.76 741.12 li
158.76 109.2 li
158.64 109.2 li
cp
f
167.04 741.12 mo
167.16 741.12 li
167.16 109.2 li
167.04 109.2 li
cp
f
175.44 741.12 mo
175.56 741.12 li
175.56 109.2 li
175.44 109.2 li
cp
f
183.84 741.12 mo
183.96 741.12 li
183.96 109.2 li
183.84 109.2 li
cp
f
192.24 741.12 mo
192.36 741.12 li
192.36 109.2 li
192.24 109.2 li
cp
f
202.8 741.12 mo
202.92 741.12 li
202.92 109.2 li
202.8 109.2 li
cp
f
54 741.72 mo
54.6 741.72 li
54.6 108.96 li
54 108.96 li
cp
f
54 741.72 mo
203.16 741.72 li
203.16 741.12 li
54 741.12 li
cp
f
202.56 741.72 mo
203.16 741.72 li
203.16 108.96 li
202.56 108.96 li
cp
f
54 109.56 mo
203.16 109.56 li
203.16 108.96 li
54 108.96 li
cp
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
/XEHCAK+Verdana*1 uf
/XEHCAK+Verdana uf
/FPFBAA+Verdana uf
/XEHCAI+Verdana-Bold*1 uf
/XEHCAI+Verdana-Bold uf
/Verdana-Bold uf
/XEHCAL+Verdana-Italic*1 uf
/XEHCAL+Verdana-Italic uf
/Verdana-Italic uf
/XEHCAJ+Verdana*1 uf
/XEHCAJ+Verdana uf
/JXJAAA+Verdana uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
